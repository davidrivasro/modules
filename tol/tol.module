<?php

/*
 * MENU SECTION
 */

function tol_menu() {

    $menu = array();
    $menu['menu_name'] = "menu-tigo-online";
    $menu['title'] = "Tigo Online";
    $menu['description'] = "Tigo Online V-2";
    menu_save($menu);

    $items = array();
    $items['admin/config/tigo-online/tol'] = array(
        'title' => 'Tigo Online',
        'description' => 'Tigo Online v2.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('tol_admin_form'),
        'access arguments' => array('administer site configuration'),
        'file' => 'tol.admin.inc',
    );

    $items['online/resumen'] = array(
        'title' => t('Resumen'),
        'page callback' => 'tol_resumen_de_tu_cuenta_page',
        'access callback' => 'user_is_logged_in',
        'file' => 'tol.pages.inc',
        'type' => MENU_NORMAL_ITEM,
        'menu_name' => 'menu-tigo-online',
        'weight' => '-50',
    );

    $items['online/facturacion'] = array(
        'title' => t('FacturaciÃ³n'),
        'page callback' => 'tol_facturacion_page',
        'access callback' => 'tol_access_not_clienttype',
        'access arguments' => array('PRE'),
        'file' => 'tol.pages.inc',
        'type' => MENU_NORMAL_ITEM,
        'menu_name' => 'menu-tigo-online',
        'weight' => '-48',
    );

    $items['online/facturacion/editar'] = array(
        'title' => t('Editar datos de FacturaciÃ³n'),
        'page callback' => 'tol_facturacion_editar_page',
        'access callback' => 'tol_access_not_clienttype',
        'access arguments' => array('PRE'),
        'type' => MENU_CALLBACK,
        'file' => 'tol.pages.inc',
    );

    $items['online/facturacion/detalle'] = array(
        'title' => t('Detalle de la Factura'),
        'page callback' => 'tol_factura_detalle_page',
        'access callback' => 'tol_access_not_clienttype',
        'access arguments' => array('PRE'),
        'type' => MENU_CALLBACK,
        'file' => 'tol.pages.inc',
    );

    //20130515
    $items['online/facturacion/descarga'] = array(
        'title' => t('Detalle de la Factura'),
        'page callback' => 'tol_factura_descarga_page',
        'access callback' => 'tol_access_not_clienttype',
        'access arguments' => array('PRE'),
        'type' => MENU_CALLBACK,
        'file' => 'tol.pages.inc',
    );

    //20130703
    $items['online/facturacion/pre-descarga'] = array(
        'title' => t('Detalle de la Factura'),
        'page callback' => 'tol_factura_pre_descarga_page',
        'access callback' => 'tol_access_not_clienttype',
        'access arguments' => array('PRE'),
        'type' => MENU_CALLBACK,
        'file' => 'tol.pages.inc',
    );

    //20130605
    //20130730
    /* Esta pagina necesita acceso libre pues pagos online la usa para reportar el pago */
    $items['online/facturacion/confirmacion_pagosonline'] = array(
        'title' => t('Confirmacion'),
        'page callback' => 'tol_factura_factura_confirmacion_pagosonline_page',
        //'access callback' => 'tol_access_not_clienttype',
        //'access arguments' => array('PRE'),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'tol.pages.inc',
    );

    $items['online/facturacion/respuesta_pagosonline'] = array(
        'title' => t('Respuesta'),
        'page callback' => 'tol_factura_factura_respuesta_pagosonline_page',
        //'access callback' => 'tol_access_not_clienttype',
        //'access arguments' => array('PRE'),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
        'file' => 'tol.pages.inc',
    );


    $items['online/mis-lineas'] = array(
        'title' => t('Mis LÃ­neas'),
        'page callback' => 'tol_mis_lineas_page',
        'access callback' => 'user_is_logged_in',
        'file' => 'tol.pages.inc',
        'type' => MENU_NORMAL_ITEM,
        'menu_name' => 'menu-tigo-online',
        'weight' => '-47',
    );

    //20130514
    $items['online/mis-lineas/camb-pred'] = array(
        'title' => t('Mis Lineas'),
        'page callback' => 'tol_mis_lineas_page',
        'access callback' => 'user_is_logged_in',
        'type' => MENU_CALLBACK,
        'file' => 'tol.pages.inc',
    );

    $items['online/mis-lineas/linea-detalle'] = array(
        'title' => t('Detalle de cuenta'),
        'page callback' => 'tol_linea_detalle_page',
        'access callback' => 'user_is_logged_in',
        'type' => MENU_NORMAL_ITEM,
        'file' => 'tol.pages.inc',
        'menu_name' => 'menu-tigo-online',
        'weight' => '-40',
    );

    $items['online/mis-lineas/mis-datos'] = array(
        'title' => t('Mis Datos'),
        'page callback' => 'tol_mis_datos_page',
        'access callback' => 'user_is_logged_in',
        'type' => MENU_NORMAL_ITEM,
        'menu_name' => 'menu-tigo-online',
        'file' => 'tol.pages.inc',
        'weight' => '-39',
    );

    $items['online/mis-lineas/mis-datos/editar'] = array(
        'title' => t('Actualizar mis Datos'),
        'page callback' => 'tol_mis_datos_editar_page',
        'access callback' => 'user_is_logged_in',
        'type' => MENU_CALLBACK,
        'file' => 'tol.pages.inc',
    );

    $items['online/saldo'] = array(
        'title' => t('Saldo'),
        'page callback' => 'tol_saldo_page',
        'access callback' => 'tol_access_not_clienttype',
        'access arguments' => array('POS'),
        'file' => 'tol.pages.inc',
        'type' => MENU_NORMAL_ITEM,
        'menu_name' => 'menu-tigo-online',
        'weight' => '-49',
    );


    $items['online/editar/documento'] = array(
        'title' => t('Documento'),
        'page callback' => 'tol_editar_documento_page',
        'access callback' => 'user_is_logged_in',
        'type' => MENU_CALLBACK,
        'file' => 'tol.pages.inc',
    );

    $items['online/editar/preguntas'] = array(
        'title' => t('Preguntas'),
        'page callback' => 'tol_editar_preguntas_page',
        'access callback' => 'user_is_logged_in',
        'type' => MENU_CALLBACK,
        'file' => 'tol.pages.inc',
    );

    $items['online/editar/codigo-seguridad'] = array(
        'title' => t('Codigo de seguridad'),
        'page callback' => 'tol_editar_codigo_seguridad_page',
        'access callback' => 'user_is_logged_in',
        'type' => MENU_CALLBACK,
        'file' => 'tol.pages.inc',
    );

    $items['online/editar/codigo-seg-reenviar'] = array(
        'title' => t('Codigo de seguridad'),
        'page callback' => 'tol_editar_codigo_seguridad_page_reenviar',
        'access callback' => 'user_is_logged_in',
        'type' => MENU_CALLBACK,
        'file' => 'tol.pages.inc',
    );

    $items['online/editar/segunda-contrasena'] = array(
        'title' => t('Solicitar Segunda Contrasena'),
        'page callback' => 'tol_editar_segunda_contrasena_page',
        'access callback' => 'user_is_logged_in',
        'type' => MENU_CALLBACK,
        'file' => 'tol.pages.inc',
    );

    $items['online/editar/asociar-linea'] = array(
        'title' => t('Asociar Linea'),
        'page callback' => 'tol_editar_asociar_linea_page',
        'access callback' => 'user_is_logged_in',
        'type' => MENU_CALLBACK,
        'file' => 'tol.pages.inc',
    );

    $items['online/mis-lineas/eliminar'] = array(
        'title' => t('Eliminar Linea'),
        'page callback' => 'tol_eliminar_linea_page',
        'access callback' => 'user_is_logged_in',
        'type' => MENU_CALLBACK,
        'file' => 'tol.pages.inc',
    );

    $items['online/linea-detalle/validacion-datos'] = array(
        'title' => t('Validacion de Datos'),
        'page callback' => 'tol_linea_detalle_validacion_page',
        'access callback' => 'user_is_logged_in',
        'type' => MENU_CALLBACK,
        'file' => 'tol.pages.inc',
    );

    $items['online/linea-detalle/bloquear-equipo'] = array(
        'title' => t('Bloquear equipo'),
        'page callback' => 'tol_linea_bloquear_equipo_page',
        'access callback' => 'user_is_logged_in',
        'type' => MENU_CALLBACK,
        'file' => 'tol.pages.inc',
    );

    $items['online/linea-detalle/bloquear-linea'] = array(
        'title' => t('Bloquear equipo'),
        'page callback' => 'tol_linea_bloquear_linea_page',
        'access callback' => 'user_is_logged_in',
        'type' => MENU_CALLBACK,
        'file' => 'tol.pages.inc',
    );

    //added RVS 20130701
    $items['online/resumen/complete-profile'] = array(
        'title' => t('Complete su perfil'),
        'page callback' => 'tol_complete_profile_page',
        'access callback' => 'user_is_logged_in',
        'type' => MENU_CALLBACK,
        'file' => 'tol.pages.inc',
    );




    return $items;
}

function tol_access_not_clienttype($type) {

    global $user;
    if (empty($user->uid))
        return false;

    $account = user_load($user->uid);
    if (in_array('administrator', $account->roles)) {
        return true;
    }
    $data = tol_get_plan_info();

    return ($data['type'] != $type);
}

/*
 * HOOK THEME SECTION
 */

function tol_theme() {

    return array(
        /* COLORBOXes */
        /*
          'codigo_seguridad' => array(
          'variables' => array(
          'content' => null,
          ),
          'template' => 'templates/codigo_seguridad',
          ),
         */

        /* Pages */
        'facturacion' => array(
            'variables' => array(
                'showDatosFactura' => true,
                'facturacion' => array(
                    'totalfactura' => null,
                    'recibir_elec' => null,
                    'recibir_fis' => null,
                ),
            ),
            'template' => 'templates/facturacion',
        ),
        'facturacion-editar' => array(
            'variables' => array(
                'recibir_factura_e' => 'no',
                'email' => 'juancarlospetruza@gmail.com',
                'detalle_factura_e' => 'si',
                'recibir_factura_f' => 'si',
                'direccion' => 'Sarmiento',
                'ciudad' => 'Santa Lucia',
                'departamento' => 'San Juan',
                'telefono' => '264 4254355',
                'detalle_factura_f' => 'si',
                'uid' => '26',
            ),
            'template' => 'templates/facturacion_editar',
        ),
        'factura-detalle' => array(
            'template' => 'templates/facturacion_detalle',
        ),
        'mis-lineas' => array(
            'variables' => array(
                'showAsociarLinea' => true,
            ),
            'template' => 'templates/mis_lineas',
        ),
        'linea-detalle' => array(
            'template' => 'templates/linea_detalle',
        ),
        'resumen-de-tu-cuenta' => array(
            'variables' => array(
                'output' => null,
                'cuenta' => null,
                'ultimas_facturas' => null,
                'showRecargar' => null,
                'recargarLink' => null,
                'showCambiarPlan' => null,
                'showPagar' => null,
                'formulario_pago' => null,
                'planType' => null,
            ),
            'template' => 'templates/resumen_de_tu_cuenta',
        ),
        'saldo' => array(
            'variables' => array(
                'showRecargar' => false,
            ),
            'template' => 'templates/saldo',
        ),
        'mis-datos' => array(
            'template' => 'templates/mis_datos',
        ),
        'mis-datos-editar' => array(
            'template' => 'templates/mis_datos_editar',
        ),
        'editar-documento' => array(
            'variables' => array(
                'tipo_dni' => array(
                    'dni' => 'DNI',
                    'pasaporte' => 'Pasaporte',
                ),
                'nro_dni' => '32354367',
                'day' => array(
                    '01' => '01',
                    '02' => '02',
                    '03' => '03',
                    '04' => '04',
                ),
                'month' => array(
                    'Enero' => 'Enero',
                    'Febrero' => 'Febrero',
                    'Marzo' => 'Marzo',
                    'Abril' => 'Abril',
                ),
                'year' => array(
                    '1986' => '1986',
                    '1987' => '1987',
                    '1988' => '1988',
                    '1999' => '1989',
                ),
            ),
            'template' => 'templates/editar_documento',
        ),
        'editar-preguntas' => array(
            'variables' => array('lineas' => null, 'saldo' => null),
            'template' => 'templates/editar_preguntas',
        ),
        'editar-codigo-seguridad' => array(
            'variables' => array('lineas' => null, 'saldo' => null),
            'template' => 'templates/editar_codigo_seguridad',
        ),
        'editar-segunda-contrasena' => array(
            'variables' => array('lineas' => null, 'saldo' => null),
            'template' => 'templates/editar_segunda_contrasena',
        ),
        'editar-asociar-linea' => array(
            'variables' => array('formulario' => null),
            'template' => 'templates/editar_asociar_linea',
        ),
        'eliminar-linea' => array(
            'variables' => array('formulario' => null),
            'template' => 'templates/eliminar_linea',
        ),
        'linea_detalle_validacion' => array(
            'variables' => array('formulario' => null),
            'template' => 'templates/mis_lineas_validacion',
        ),
        'linea_bloquear_equipo' => array(
            'variables' => array('formulario' => null),
            'template' => 'templates/mis_lineas_bloquear_equipo',
        ),
        'linea_bloquear_linea' => array(
            'variables' => array('formulario' => null),
            'template' => 'templates/mis_lineas_bloquear_linea',
        ),
        'complete-profile' => array(
            'variables' => array('formulario' => null),
            'template' => 'templates/complete_profile',
        ),
        'segunda-contrasena' => array(
            'variables' => array('formulario' => null),
            'template' => 'templates/segunda_contrasena',
        ),
        /* Blocks */
        'line_selector' => array(
            'variables' => array(
                'showAsociarLinea' => true,
                'lineas' => array(),
            ),
            'template' => 'templates/line_selector',
        ),
        'que_puedo_hacer' => array(
            'variables' => array(),
            'template' => 'templates/que_puedo_hacer',
        ),
        'todavia_tienes_dudas' => array(
            'variables' => array(
                'telefono_fijo' => '01800-000000',
                'telefono_movil' => '*300',
            ),
            'template' => 'templates/todavia_tienes_dudas',
        ),
        'confirmacion_mail' => array(
            'template' => 'templates/tol_confirmacion_pago_mail',
        ),
    );
}

/*
 * BLOCKS SECTION
 */

function tol_block_info() {
    $blocks = array();

    /* Block selector lineas sidebar */
    $blocks['line_selector'] = array(
        'info' => t('Selector vertical de lineas'),
        'cache' => DRUPAL_CACHE_PER_USER,
        //'cache' => DRUPAL_NO_CACHE,
    );

    /* Block que puedo hacer */
    $blocks['que_puedo_hacer'] = array(
        'info' => t('Que puedo hacer ?'),
    );

    /* Block Todavia tienes dudas ? */
    $blocks['todavia_tienes_dudas'] = array(
        'info' => t('Todavia tienes dudas ?'),
    );

    return $blocks;
}

function tol_block_view($delta = '') {
    $block = array();

    switch ($delta) {
        case 'line_selector':
            $block['content'] = tol_line_selector_block();
            break;
        case 'que_puedo_hacer':
            $block['content'] = tol_que_puedo_hacer_block();
            break;
        case 'todavia_tienes_dudas':
            $block['content'] = tol_todavia_tienes_dudas_block();
            break;
    }

    return $block;
}

function tol_line_selector_block() {
    global $user;
    if (empty($user->uid)) {
        return null;
    }

    if (empty($_SESSION['check_profile_is_running'])) {
        if (empty($_SESSION['check_profile_is_completed'])) {
            _tol_check_profile();
        }
    }

    if (empty($_SESSION['my_line'])) {
        $_SESSION['my_line'] = tol_get_current_msisdn();
    }

    $lineas = null;
    module_load_include('inc', 'tol', 'lib/lines');
    $lineDB = new TOL_lines();
    $lines = $lineDB->get($user->uid);
//error_log("tol_line_selector_block user->uid: ".print_r($user->uid, TRUE)."\n",3,'/mnt/logs/drupal/servicios.log');
//error_log("tol_line_selector_block lines: ".print_r($lines, TRUE)."\n",3,'/mnt/logs/drupal/servicios.log');
//error_log("tol_line_selector_block my_line: ".print_r($_SESSION['my_line'], TRUE)."\n",3,'/mnt/logs/drupal/servicios.log');

    if (!empty($lines)) {
        foreach ($lines as $line) {

            if ($line->name == '') {
                $linea_nombre = 'Mi linea Tigo';
            } else {
                $linea_nombre = $line->name;
            }

            $lineas['lineas'][] = array(
                'nombre' => $linea_nombre,
                'numero' => $line->line,
                'userid' => $user->uid,
                'active' => ($_SESSION['my_line'] == $line->line) ? 'predeterminado' : '',
            );
        }
    } else { //si no hay lineas en la BD, toma la linea de user_load y la meto en la BD?
        $user_fields = user_load($user->uid, true);
        $user_msisdn = !empty($user_fields->field_msisdn['und']['0']['value'])?$user_fields->field_msisdn['und']['0']['value']:"";
        
        $_SESSION['asociar-line'] = $user_msisdn;
        $_SESSION['asociar-name'] = "Mi Linea Tigo";
		
        if (_tol_addNewLine()) { //agrego la linea
            drupal_goto('online/resumen');
        }
    }

    return theme('line_selector', array('showAsociarLinea' => variable_get('tol_showAsociarLinea', true), 'lineas' => $lineas));
}

function tol_que_puedo_hacer_block() {
    return theme('que_puedo_hacer');
}

function tol_todavia_tienes_dudas_block() {
    return theme('todavia_tienes_dudas');
}

function _tol_get_linea_first($uid = null) {
	
    $user_fields = user_load($uid);
//    error_log("_tol_get_linea_first user_fields: ".print_r($user_fields, TRUE)."\n",3,'/mnt/logs/drupal/servicios.log');
    return @$user_fields->field_msisdn['und']['0']['value'];
}

function tol_get_client_info() {
    $perfil = array(
        'name' => null,
        'lastName' => null,
        'documenNumber' => null,
        'documentType' => null,
        'address' => null,
        'state' => null,
        'city' => null,
        'phoneNumber' => null,
        'email' => null,
    );

    $msisdn = tol_get_current_msisdn();

    module_load_include('inc', 'tigoapi', 'tigoapi');
    $tigo = TigoAPI::getInstance();

    if ($data = $tigo->GetClientAccountGeneralInfo($msisdn, 1, 1, 1)) {
        $data = $data->ClientType;

        if (!empty($data->name))
            $perfil['name'] = trim($data->name);
        if (!empty($data->firstLastName))
            $perfil['lastName'] = trim($data->firstLastName);
        if (!empty($data->secondLastName))
            $perfil['lastName'].=' ' . trim($data->secondLastName);
        if (!empty($data->documenNumber))
            $perfil['documenNumber'] = trim($data->documenNumber);
        if (!empty($data->documentType)) {

            if (is_numeric($data->documentType)) {
                $DocsTypeCodes = array(
                    1 => t('Cedula de Identidad Policial'),
                    2 => t('Pasaporte'),
                    3 => t('Documento Nacional de Identidad'),
                    4 => t('Carteira de Identidade'),
                    5 => t('AdmisiÃ³n Temporal'),
                    6 => t('AdmisiÃ³n Permanente'),
                    7 => t('Carnet DiplomÃ¡tico'),
                    8 => t('Ninguno - Blanco'),
                    9 => t('Carnet Militar'),
                    10 => t('RUN'),
                    11 => t('Carnet de Extranjero'),
                );
                $perfil['documentType'] = $DocsTypeCodes[$data->documentType];
            } else {
                $perfil['documentType'] = t($data->documentType);
            }
            $terms = taxonomy_get_term_by_name($perfil['documentType'], 'type_document');
            if (!empty($terms)) {
                $term = current($terms);
                $perfil['documentType'] = $term->tid;
            }
        }
        if (!empty($data->phoneNumber))
            $perfil['phoneNumber'] = trim($data->phoneNumber);
        if (!empty($data->email) && strpos($data->email, '@') !== FALSE)
            $perfil['email'] = trim($data->email);
    }

    global $user;
    $account = user_load($user->uid);

    if (empty($perfil['name'])) {
        if (!empty($account->field_user_fullname[LANGUAGE_NONE][0]['value'])) {
            $name_full = explode(' ', trim($account->field_user_fullname[LANGUAGE_NONE][0]['value']));
        } else {
            $name_full = explode(' ', trim($account->name));
        }
        $perfil['name'] = trim($name_full[0]);
        $perfil['lastName'] = trim(@$name_full[1]);
    }
    if (empty($perfil['documenNumber'])) {
        if (!empty($account->field_nro_documento[LANGUAGE_NONE][0]['value'])) {
            $perfil['documenNumber'] = $account->field_nro_documento[LANGUAGE_NONE][0]['value'];
        }
    }
    if (empty($perfil['documentType'])) {
        if (!empty($account->field_tipo_documento[LANGUAGE_NONE][0]['value'])) {
            $perfil['documentType'] = $account->field_tipo_documento[LANGUAGE_NONE][0]['value'];
        }
    }
    if (empty($perfil['phoneNumber'])) {
        if (!empty($account->field_msisdn[LANGUAGE_NONE][0]['value'])) {
            $perfil['phoneNumber'] = $account->field_msisdn[LANGUAGE_NONE][0]['value'];
        }
    }
    if (empty($perfil['email'])) {
        if (!empty($account->field_msisdn[LANGUAGE_NONE][0]['value'])) {
            $perfil['email'] = $account->mail;
        }
    }
    if (empty($perfil['address'])) {
        if (!empty($account->field_direccion_user[LANGUAGE_NONE][0]['value'])) {
            $perfil['address'] = $account->field_direccion_user[LANGUAGE_NONE][0]['value'];
        }
    }
    if (empty($perfil['state'])) {
        if (!empty($account->field_departamento[LANGUAGE_NONE][0]['tid'])) {
            $perfil['state'] = $account->field_departamento[LANGUAGE_NONE][0]['tid'];
        }
    }
    if (empty($perfil['city'])) {
        if (!empty($account->field_ciudad[LANGUAGE_NONE][0]['tid'])) {
            $perfil['city'] = $account->field_ciudad[LANGUAGE_NONE][0]['tid'];
            if (empty($perfil['state'])) {
                $parents = taxonomy_get_parents($account->field_ciudad[LANGUAGE_NONE][0]['tid']);
                if (!empty($parents)) {
                    $perfil['state'] = current($parents);
                }
            }
        }
    }
    return $perfil;
}

function _tol_obtener_saldo2() {

    $balanceAmountCall = 0;
    $expirationDateCall = null;

    $balanceAmountSMS = 0;
    $expirationDateSMS = null;

    $balanceAmountVOICE = 0;
    $expirationDateVOICE = null;

    $balanceAmountDATA = 0;
    $expirationDateDATA = null;
    $wallet_saldo = variable_get('tol_saldo_wallet_saldo', 'Saldo_principal');
    $dataUnit = null;

    $msisdn = tol_get_current_msisdn();

    if (!empty($msisdn)) {
        $plan = tol_get_plan_info();
//        error_log("_tol_obtener_saldo2 plan : ".print_r($plan, TRUE)."\n",3,'/mnt/logs/drupal/servicios.log');

//error_log("_tol_obtener_saldo2  plan: ".print_r($plan, TRUE)."\n",3,'/mnt/logs/drupal/servicios.log');
        module_load_include('inc', 'tigoapps', 'resources/tigoapi');

        $VOICEarray = null;
        $SMSarray = null;
        $DATAarray = null;
        $array_saldos = _tigoapps_resource_GetBalanceInfo($msisdn, $plan['type']);
//       error_log("_tol_obtener_saldo2 plan['type'] : ".print_r($plan['type'], TRUE)."\n",3,'/mnt/logs/drupal/servicios.log');

//        error_log("_tol_obtener_saldo2 array_saldos : ".print_r($array_saldos, TRUE)."\n",3,'/mnt/logs/drupal/servicios.log');

//error_log("_tol_obtener_saldo2  array_saldos: ".print_r($array_saldos, TRUE)."\n",3,'/mnt/logs/drupal/servicios.log');

        if (empty($array_saldos['response']['wallets']) && $plan['type'] != '*') {
            $array_saldos = _tigoapps_resource_GetBalanceInfo($msisdn, '*');
//            error_log("_tol_obtener_saldo2 vuelve array_saldos (*): \n",3,'/mnt/logs/drupal/servicios.log');        
        }
        if ($array_saldos['status'] == 'OK') {
            foreach ($array_saldos['response']['wallets'] as $wallet) {
                if (!empty($wallet->expirationDate)) {
                    $date = _tol_generic_format_fechaDDMMYYYY(substr($wallet->expirationDate, 0, 10));
                    if (strlen($wallet->expirationDate) == 19 && variable_get('tol_showTimeInExpirationDate', false)) {
                        $date.=' ' . substr($wallet->expirationDate, 11, 8);
                    }
                    $wallet->expirationDate = $date;
                }
                $name = explode('_', $wallet->wallet);
                switch (strtolower($name[0])) {
                    case 'saldo':
                        //segun requerimiento solo se debe mostrar el saldo de el wallet q tenga como id Saldo_principal
//error_log("_tol_obtener_saldo2  $wallet->wallet: ".print_r(variable_get('tol_saldo_wallet_saldo'), TRUE)."\n",3,'/mnt/logs/drupal/servicios.log');    
                            
                        if ($wallet->wallet == variable_get('tol_saldo_wallet_saldo')) {
							//error_log("_tol_obtener_saldo2  balanceAmount: ".print_r($wallet->balanceAmount, TRUE)."\n",3,'/mnt/logs/drupal/servicios.log');    
                            $balanceAmountCall += $wallet->balanceAmount;
                            if (!$expirationDateCall && !empty($wallet->expirationDate))
                                $expirationDateCall = $wallet->expirationDate;
                        }
                        break;
                    case 'data':
                        if (!$dataUnit && !empty($wallet->unit))
                            $dataUnit = $wallet->unit;
                        $wallet->balanceAmount = round($wallet->balanceAmount, 0);
                        $balanceAmountDATA += $wallet->balanceAmount;

                        if (!$expirationDateDATA && !empty($wallet->expirationDate)) {
                            $expirationDateDATA = @$wallet->expirationDate;
                        }
                        
                        if (variable_get("tigoapi_country_iso") == "HN") {
                           $wallet->unit="KB";
                        }
                        $wallet->balanceAmount = $wallet->balanceAmount . ' ' . $wallet->unit;                       
                        $DATAarray[] = $wallet;
                        break;
                    case 'sms':
                        $balanceAmountSMS += $wallet->balanceAmount;
                        if (!$expirationDateSMS && !empty($wallet->expirationDate))
                            $expirationDateSMS = @$wallet->expirationDate;
                        $SMSarray[] = $wallet;
                        break;
                    case 'min':
                        $wallet->balanceAmount = _tol_min_int_decimal($wallet->balanceAmount);
                        $balanceAmountVOICE += $wallet->balanceAmount;

                        if (!$expirationDateVOICE && !empty($wallet->expirationDate))
                            $expirationDateVOICE = @$wallet->expirationDate;
                        $VOICEarray[] = $wallet;

                        break;
                }
            }
            $balanceAmountCall = _tol_region_format_moneda($balanceAmountCall, 'floor'); // es probable que cristian quira un round en vez de un floor
            if ($dataUnit)
                if (variable_get("tigoapi_country_iso") == "HN") {
                    $dataUnit = "KB";
                }
            $balanceAmountDATA = $balanceAmountDATA . ' ' . $dataUnit;
        }
    }
    return array(
        'balanceAmountCall' => $balanceAmountCall,
        'expirationDateCall' => $expirationDateCall,
        'balanceAmountVOICE' => $balanceAmountVOICE,
        'expirationDateVOICE' => $expirationDateVOICE,
        'VOICEarray' => $VOICEarray,
        'balanceAmountSMS' => $balanceAmountSMS,
        'expirationDateSMS' => $expirationDateSMS,
        'SMSarray' => $SMSarray,
        'balanceAmountDATA' => $balanceAmountDATA,
        'expirationDateDATA' => $expirationDateDATA,
        'DATAarray' => $DATAarray,
        'status' => $array_saldos['status'],
        'planType' => $plan['type'],
    );
}

function _tol_min_int_decimal($total) {
    $valor = 0;
    $entero = (int) $total;
    $sizemoneda = (int) strlen(variable_get('tol_moneda', '$'));

    if (($total - $entero) > 0) {
        $valor = substr(_tol_region_format_moneda($total, 'floor'), $sizemoneda, strlen(_tol_region_format_moneda($total, 'floor')) - 1);
    } else {
        $valor = $entero;
    }
    return $valor;
}

function _tol_sms_msisdn_confirmation($msisdn) {

    if (!empty($msisdn)) {
        // Generate random number
        $code = rand(100000, 999999);
        $message = t('El codigo de confirmacion Tigo es @code', array('@code' => $code));

        $_SESSION['confirmation-code'] = $code; //se guarda en sesion el codigo de confirmacion
        //Log
        $today = date("Y-m-d, g:i:s a");
        watchdog('tol', '_tol_sms_msisdn_confirmation ' . $today . ' msisdn: ' . $msisdn . ' --> code sent: ' . $code);

        module_load_include('module', 'smsframework', 'sms');
        $sender = variable_get('msisdn_verify_sms_sender', "");
        $result = sms_send($msisdn, $message, array('sender' => $sender));
        if (!$result) {
            $flag = FALSE;
        }
    }
}

function _tol_addNewLine() {
    module_load_include('inc', 'tol', 'lib/lines');
    $lineDB = new TOL_lines();
    global $user;
    try {
        $obj_lineas = $lineDB->add($user->uid, $_SESSION['asociar-line'], null, $_SESSION['asociar-name']);
        drupal_set_message(t('La linea ha sido agregada con Ã©xito.'));
        tol_clear_cache();
        return true;
    } catch (Exception $e) {
        drupal_set_message(t($e->getMessage()), 'error');
        return false;
    }
}

function _tol_generic_format_fechaDDMMYYYY($fecha) {
    //cambia de 2010-01-03 a 03/01/2010
    $year = substr($fecha, 0, 4);
    $month = substr($fecha, 5, 2);
    $day = substr($fecha, 8, 2);

    $fecha2 = $day . '/' . $month . '/' . $year;
    return $fecha2;
}

function _tol_region_format_moneda($saldo = 0, $round = 'ceil', $moneda_alternativa = '' /* ceil, floor or round */) {
	    
    if (!variable_get('tol_decimales', 0)) {
        $saldo = $round($saldo);
    }
    $saldo = floatval($saldo);
    $moneda = variable_get('tol_moneda', '$');

    if ($moneda_alternativa != '') {
        $moneda = $moneda_alternativa;
    }

    if (variable_get('tol_pmoneda', 0) == 0) {
	    
        if (variable_get("tigoapi_country_iso") == "PY"){
			return $moneda . '' . number_format($saldo, variable_get('tol_decimales', 0), ',', '.');
        }
        else
        {
			return $moneda . '' . number_format($saldo, variable_get('tol_decimales', 0));
        }
        
    } else {
	    return number_format($saldo, variable_get('region_decimales', 0), ',', '.') . ' ' . $moneda;
    }
}

function _tol_obtener_facturas() {
    $msisdn = tol_get_current_msisdn();
    $result = null;

    if (!empty($msisdn)) {
        module_load_include('inc', 'tigoapi', 'tigoapi');
        $tigo = TigoAPI::getInstance();
        $result = $tigo->GetInvoiceHeader($msisdn);
    }
    return $result;
}

function _tol_obtener_datos_factura() {
    $msisdn = tol_get_current_msisdn();


    if (empty($msisdn)) {
        return;
    }

    $datos_factura = null;

    if (empty($_SESSION['factura_actual'])) {
        return;
    } else {

        module_load_include('inc', 'tigoapi', 'tigoapi');
        $tigo = TigoAPI::getInstance();



        $result = $tigo->GetInvoiceHeader($msisdn);

        if (!empty($result->invoiceList->invoideHeader)) {
            foreach ($result->invoiceList->invoideHeader as $factura) {
                if ($_SESSION['factura_actual'] == $factura->invoiceNumber) {
                    $datos_factura = $factura;
                    break;
                }
            }
        }
    }

    return $datos_factura;
}

function _tol_obtener_config_factura() {
    $msisdn = tol_get_current_msisdn();
    $result = new stdClass();
    if (empty($msisdn)) {
        return;
    } else {
        /*
          $query = new EntityFieldQuery();
          $result = $query->entityCondition('entity_type', 'factura')
          ->entityCondition('bundle', 'general')
          ->fieldCondition('field_linea_factura', 'value', $msisdn, '=')
          ->execute();

          if (isset($result['factura'])) {
          $result = current($result['factura']);
          $resultObj = entity_get_controller('factura')->load(array($result->id));
          $result = $resultObj[$result->id];
          }
         */
        //module_load_include('inc', 'tigoapi', 'getInvoiceStatus');
        try {
            if (variable_get('tigoapi_endpoint') == variable_get('getInvoiceStatus_endpoint')) {
                module_load_include('inc', 'tigoapi');
                $tigo = TigoAPI::getInstance();
            } else {
                module_load_include('inc', 'tigoapi', 'getInvoiceStatus');
                $tigo = getInvoiceStatusClient::getInstance();
            }
            $result = $tigo->GetInvoiceStatus($msisdn);
            //error_log("GetInvoiceStatus result : ".print_r($result, TRUE)."\n",3,'/mnt/logs/drupal/servicios.log');

        } catch (Exception $e) {
            $result->success = 0;
        }
        if (variable_get('tol_is_fact_fisica_editable', TRUE)) {
            $result->printedInvoiceStatus = 1;
        }
        if (variable_get("tigoapi_country_iso") == "CO") {

            if (isset($_SESSION['factura_fis_elec'])) {
                if ($_SESSION['factura_fis_elec'] == '1') {
                    $result->printedInvoiceStatus = '1';
                    $result->electronicInvoiceStatus = '';
                }
                if ($_SESSION['factura_fis_elec'] == '2') {
                    $result->printedInvoiceStatus = '';
                    $result->electronicInvoiceStatus = '1';
                }
                if ($_SESSION['factura_fis_elec'] == '3') {
                    $result->printedInvoiceStatus = '1';
                    $result->electronicInvoiceStatus = '1';
                }
            }
            if (isset($_SESSION['invoiceType'])) {
                $result->printedInvoiceDetails = $_SESSION['invoiceType'];
                $result->electronicInvoiceDetails = $_SESSION['invoiceType'];
            }
        }
        module_load_include('inc', 'tigoapi', 'tigoapi');
        $tigo = TigoAPI::getInstance();
        $msisdn = tol_get_current_msisdn();

        $datos = $tigo->GetClientAccountGeneralInfo($msisdn, 1, 1, 1);
		//error_log("GetClientAccountGeneralInfo datos : ".print_r($datos, TRUE)."\n",3,'/mnt/logs/drupal/servicios.log');
        if (!empty($datos)) {
            $result->email = $datos->ClientType->email;
            $result->phoneNumber = $datos->ClientType->phoneNumber;
            $result->address = @$datos->contracts->ContractType->profiles->ContractProfileType->billingAddress;
            $result->city = @$datos->contracts->ContractType->profiles->ContractProfileType->city;
            $result->department = @$datos->contracts->ContractType->profiles->ContractProfileType->department;
            if (!empty($result->email) && strpos($result->email, '@') === false)
                $result->email = ''; //parche porque a veces viene el email con el valor "." (punto) 
        }
        /*
          $result=stdClass Object
          (
          [success] => 1
          [printedInvoiceStatus] => 1
          [printedInvoiceDetails] =>
          [electronicInvoiceStatus] =>
          [electronicInvoiceDetails] =>
          [address]=> 'Somewhere'
          [city]=> 'SomeCity'
          [department]=> 'SomeState'
          [phoneNumber]=> '696969696969'
          )
         */
    }

    return $result;
}

function _tol_obtener_factura_pdf($cycle, $invoiceSerial, $invoiceNumber, $invoiceRequestedType = NULL, $serviceType = NULL, $date = NULL) {

    $msisdn = tol_get_current_msisdn();

    $result = null;

    //if (empty($invoiceNumber)) { //chequear


    if (empty($msisdn)) { //temporal
        return;
    } else {
        $additionalParameters = null;
        /**
         * Esto es solo en colombia
         */
        if (variable_get('tigoapi_country_iso') == "CO") {
            /*
              $searchTypes = array(
              1 => 'MSISDN',
              2 => 'DOCUMENT',
              3 => 'BILLING_ACCOUNT',
              4 => 'CLIENT_CODE',
              );
              8840084705
             */
            module_load_include('inc', 'tigoapi', 'tigoapi');
            $tigo = TigoAPI::getInstance();
            if ($result = $tigo->GetClientAccountGeneralInfo($msisdn, 1, 18, 1)) {
                foreach ($result->additionalResults as $param) {
                    if (trim($param->parameterName) == 'Dsn') {
                        //$invoiceNumber = '';
                        $additionalParameters = array(
                            'ParameterType' => array(
                                'parameterName' => 'AccountNumber',
                                'parameterType' => '',
                                'parameterValue' => trim($param->parameterValue)
                            )
                        );



                        break;
                    }
                }
            }
        }


        $error = FALSE;
        $j = 0;
        module_load_include('inc', 'tigoapi', 'tigoapi');
        $tigo = TigoAPI::getInstance(); //new TigoAPIService();
        while ($j < variable_get('tol_factura_intentos_pdf', 1)) {

            //$result = $tigo->GetInvoicePdf($cycle, $invoiceSerial, $invoiceNumber, $invoiceRequestedType, $serviceType, $date);
            //OJO: ESTO ES PASARSELO A GetInvoicePdf, hace falta?
            /*
              $tigo->additionalparameters = array(
              'parameterName' => "msisdn",
              'parameterType' => "",
              'parameterValue'=> $msisdn,
              );
             */
            $today = date("Y-m-d, g:i:s a");
            if (variable_get("tigoapi_country_iso") == "HN") {
                // $date=substr($date,0,10);
                $result = $tigo->GetInvoicePdf($cycle, $invoiceSerial, $msisdn, $invoiceRequestedType, $serviceType, $date, $additionalParameters);
            } else {
                $result = $tigo->GetInvoicePdf($cycle, $invoiceSerial, $invoiceNumber, $invoiceRequestedType, $serviceType, $date, $additionalParameters);
            }

            if ($result) {

                if (!empty($result->invoice)) {
                    header('Content-type: application/pdf');
                    header('Content-Disposition: attachment; filename="' . $invoiceNumber . '.pdf"');
                    if (strlen($result->invoice) < 256) {
                        print file_get_contents($result->additionalResult->ParameterType->parameterValue);
                    } else {
                        print @$result->invoice;
                    }
                    drupal_exit();
                } if (!empty($result->additionalResult->ParameterType->parameterValue)) {
                    header('Content-type: application/pdf');
                    header('Content-Disposition: attachment; filename="' . $invoiceNumber . '.pdf"');
                    print file_get_contents($result->additionalResult->ParameterType->parameterValue);
                    drupal_exit();
                } else {
                    watchdog('tol', '_tol_obtener_factura_pdf: ' . $j . ' -> ' . $result->Error->description);
                }
            }
            $j++;
        }
    }
    return true;
}

function tol_get_current_msisdn() {
    if (!isset($_SESSION['my_line'])) {

        global $user;
        $_SESSION['my_line'] = _tol_get_linea_first($user->uid);


        if (empty($_SESSION['my_line'])) {

            module_load_include('inc', 'tol', 'lib/lines');
            $lineDB = new TOL_lines();
            $lines = $lineDB->get($user->uid);
            if (!empty($lines)) {
                $_SESSION['my_line'] = $lines[0]->line;
            }
        }
    }
    return @$_SESSION['my_line'];
}

function _tol_obtener_datos_cliente() {
    $msisdn = tol_get_current_msisdn();
    if (!empty($msisdn)) {
        module_load_include('inc', 'tigoapi', 'tigoapi');
        $tigo = TigoAPI::getInstance();
        $result = $tigo->GetClientAccountGeneralInfo($msisdn, 1, 18, 1);
        
        return $result;

        //return $ret;
    }
    return false;
}


function _tol_obtener_PinPuk() {
    $msisdn = tol_get_current_msisdn();
    $result = null;
    if (!empty($msisdn)) {
        module_load_include('inc', 'tigoapi', 'tigoapi');
        $tigo = TigoAPI::getInstance();
        $result = $tigo->GetPinPuk($msisdn);
    }
    return $result;
}

function _tol_obtener_Imeis() {
    $msisdn = tol_get_current_msisdn();

    $imeis = null;

    if ($msisdn) {
        module_load_include('inc', 'tigoapi', 'tigoapi');
        $tigo = TigoAPI::getInstance(); //new TigoAPIService();

        $result = $tigo->ListImeis($msisdn);

        if (!empty($result->imeiList->imeiInfo)) {
            $result = $result->imeiList->imeiInfo;
            if (!is_array($result))
                $result = array($result);
            foreach ($result as $item) {
                // if (!empty($item->imei))
                $imeis[] = $item->imei;
            }
        }
    }


    return $imeis;
}

function _tol_obtener_info_equipo() {
    $path = "sites/default/files/equipos/";
    $equipo = array(
        'uri' => $path . 'tac_key.png',
        'marca' => 'No disponible',
        'modelo' => 'No disponible',
        'imei' => Null,
    );
    $imeis = _tol_obtener_Imeis();

    foreach ($imeis as $imei) {
        $result = db_query("SELECT * FROM tigo_tacs WHERE '$imei' LIKE CONCAT(imei,'%') ORDER BY LENGTH(imei) DESC LIMIT 1");
        $result = $result->fetchAssoc();
        if (!empty($result)) {
            if (file_exists($path . $result['imei'] . '.png')) {
                $equipo['uri'] = $path . $result['imei'] . '.png';
            } else {
                $equipo['uri'] = $path . 'tac_key.png'; //Por si no existe la imagen
            }
            $equipo['marca'] = $result['modelo']; //Secuela de Imaginamos
            $equipo['modelo'] = $result['marca']; //Secuela de Imaginamos
            $equipo['imei'] = $imei;

            break;
        }


        if (empty($equipo['imei'])) {
            $equipo['imei'] = empty($imei) ? 'No disponible' : $imei;
        }
    }
    return $equipo;
}

function _tol_bloquear_linea() {
    $msisdn = tol_get_current_msisdn();

    $result = null;

    $operations = array(
        1 => 'BLOCK',
        0 => 'UNLOCK',
    );

    $types = array(
        1 => 'SIM',
        2 => 'IMEI',
        3 => 'SIM_IMEI',
        4 => 'CHIP',
        5 => 'CHIP_IMEI',
    );


    if (variable_get('tigoapi_country_iso')!= "CO")
        $type = 1;
    else
        $type = 4;

    module_load_include('inc', 'tigoapi', 'tigoapi');
    $tigo = TigoAPI::getInstance();
    $result = $tigo->BlockUnlockSimImei($msisdn, $types[$type], $operations[1]);

    if (!empty($result->success)) {
        drupal_set_message(t('El reporte de la linea ha sido exitoso'), 'status');
    } else {
        drupal_set_message(t('En este momento no se puede realizar el reporte de la linea'), 'warning');
    }
}

function _tol_bloquear_equipo() {
    $msisdn = tol_get_current_msisdn();

    $result = null;

    $operations = array(
        1 => 'BLOCK',
        0 => 'UNLOCK',
    );


    $types = array(
        1 => 'SIM',
        2 => 'IMEI',
        3 => 'SIM_IMEI',
        4 => 'CHIP',
        5 => 'CHIP_IMEI',
    );
    if (variable_get("tigoapi_country_iso") == "HN"){
        $type = 3;
    }    
    else{
		$type = 2;}
    module_load_include('inc', 'tigoapi', 'tigoapi');
    $tigo = TigoAPI::getInstance();
    $result = $tigo->BlockUnlockSimImei($msisdn, $types[$type], $operations[1]);

    if (!empty($result->success)) {
        drupal_set_message(t('El reporte del equipo ha sido exitoso'), 'status');
    } else {
        drupal_set_message(t('En este momento no se puede realizar el reporte del equipo'), 'warning');
    }
}

/**
 * New 'Factura' object constructor
 */
function _tol_factura_general_create($type = 'general') {
    $msisdn = tol_get_current_msisdn();

    // If movile number is valid
    $valid = db_select('field_data_field_linea', 'field_linea')
            ->fields('field_linea', array('bundle', 'field_linea_value'))
            ->condition('field_linea_value', $msisdn)
            ->countQuery()
            ->execute()
            ->fetchField();

    // If movile number is duplicated
    $dulicated = db_select('field_data_field_linea_factura', 'field_linea_factura')
            ->fields('field_linea_factura', array('bundle', 'field_linea_factura_value'))
            ->condition('field_linea_factura_value', $msisdn)
            ->countQuery()
            ->execute()
            ->fetchField();

    if ($valid > 0 && $dulicated == 0) {
        // Entity fields
        $new = array(
            'type' => $type,
            'title' => '',
            'field_linea_factura' => array('und' => array(0 => array('value' => $msisdn,),),),
            'field_factura_valor' => array('und' => array(0 => array('value' => 0,),),),
            'field_fecha_limite_pago' => array('und' => array(0 => array('value' => 0,),),),
            'field_fecha_corte' => array('und' => array(0 => array('value' => 0,),),),
            'field_factura_fis_elec' => array('und' => array(0 => array('value' => 0,),),),
            'field_factura_correo' => array('und' => array(0 => array('value' => 0,),),),
            'field_direccion' => array('und' => array(0 => array('value' => 0,),),),
            'field_factura_det_res' => array('und' => array(0 => array('value' => 0,),),),
            'field_factura_ultimos3pagos' => array('und' => array(0 => array('value' => 0,),),),
        );

        return entity_get_controller('factura')->create($new);
    } else {
        // Answer when the data given is not valid
        if (!is_int($msisdn)) //dpm('$msisdn esta vacio o no tiene un valor nÃºmerico entero valido');
            if ($valid < 1) //dpm('$msisdn no existe o no es una lÃ­nea valida registrada en el sistema');
                if ($dulicated != 0)// dpm('$msisdn esta duplicado en el sistema de facturaciÃ³n');
                    return FALSE;
    }
}

function _tol_factura_general_save($factura) {

    $misidn = $factura->field_linea_factura['und'][0]['value'];

    // If movile number is valid
    $valid = db_select('field_data_field_linea', 'field_linea')
            ->fields('field_linea', array('bundle', 'field_linea_value'))
            ->condition('field_linea_value', $misidn)
            ->countQuery()
            ->execute()
            ->fetchField();

    if ($valid > 0) {
        $result = entity_get_controller('factura')->save($factura);
        return $result;
    } else {
        return FALSE;
    }
}

//RVS 20130627
function _tol_load_cities($dep) {
    //$dep es el numero del departamento del cual se quieren obtener las ciudades


    if (empty($dep)) {
        $cities_options = array('- Seleccione -');
        return $cities_options;
    }

    // Ciudad
    $v = taxonomy_vocabulary_machine_name_load('city');
    $terms = taxonomy_get_tree($v->vid, $dep, 1, false);
    $cities_options = array();

    foreach ($terms as $key => $value) {
        $cities_options[$value->tid] = $value->name;
    }

    return $cities_options;
}

//RVS 20130701
function _tol_check_profile() {
    global $user;

    $userinfo = user_load($user->uid, true);

    $flag_required_field_tipo_documento = false;
    $flag_required_field_nro_documento = false;

    if ((variable_get('tigo_region_flag_required_field_tipo_documento', 0) == 1) & (empty($userinfo->field_tipo_documento['und'][0]['tid']))) {
        //tigo_region_flag_required_field_tipo_documento is required and is empty
        $flag_required_field_tipo_documento = true;
    }

    if ((variable_get('tigo_region_flag_required_field_nro_documento', 0) == 1) & (empty($userinfo->field_nro_documento['und'][0]['value']))) {
        //tigo_region_flag_required_field_nro_documento is required and is empty
        $flag_required_field_nro_documento = true;
    }


//falta poner los casos en que entraria, seria solo email y documento?
    if ((empty($userinfo->mail)) | ($flag_required_field_tipo_documento) | ($flag_required_field_nro_documento)) {

        if ($userinfo->uid != 1) {
            //drupal_set_message(t('Por favor complete su perfil'), 'status');
            drupal_set_message(t('Al cambiar tu direccion de correo recibiras un mensaje para confirmar el mismo'), 'status');

            $_SESSION['check_profile_is_running'] = true;

            drupal_goto('online/resumen/complete-profile');
        }
    } else {
        $_SESSION['check_profile_is_completed'] = true; //Marco en session que ya hice el chequeo
    }
}

/* * ********************************************************************* */

/* * ********* FORMULARIOS ******************** */

/** Mis Lineas * */
function tol_mis_lineas_form($form, &$form_state, $linea) {

    $linea_id = $linea['lineaId'];
    $nombre_id = $linea['nombre'];
    $linea_numero = $linea['numero'];

    $form = array();

    $form['id'] = array(
        '#type' => 'hidden',
        '#value' => $linea_id,
    );

    $form['nombre_editar'] = array(
        '#type' => 'textfield',
        '#default_value' => $nombre_id,
    );

    $form['numero_linea'] = array(
        '#type' => 'hidden',
        '#default_value' => $linea_numero,
    );

    $form['linea'] = array(
        '#markup' => '<div class="linea_numero">' . $linea_numero . '</div>',
    );

    $form['guardar'] = array(
        '#type' => 'submit',
        '#value' => t('Guardar'),
        //'#name' => 'continue',
        '#name' => 'continue_' . $linea_id,
        //'#attributes' => array('class' => array('form-send')),
        '#attributes' => array('class' => array('form-send'), 'id' => 'tol_mis_lineas_form_' . $linea_id),
    );

    $form['cancelar'] = array(
        '#type' => 'button',
        '#value' => t('Cancelar'),
        '#name' => 'cancelar',
        '#submit' => array('tol_mis_lineas_cancel_button'),
        '#attributes' => array('class' => array('form-cancel')),
    );

    return $form;
}

function tol_mis_lineas_cancel_button($form, &$form_state) {
    $url = $_GET['destination'] ? $_GET['destination'] : '/online/mis-lineas';
    drupal_goto($url);
}

function tol_mis_lineas_form_submit($form, &$form_state) {
    module_load_include('inc', 'tol', 'lib/lines');
    $lineDB = new TOL_lines();

    global $user;

    if ($lineDB->modifyName($user->uid, $form_state['values']['numero_linea'], $form_state['values']['nombre_editar'])) {
        tol_clear_cache();
        drupal_set_message(t('El nombre de la linea ha sido actualizado.'), 'status');
    } else {
        drupal_set_message(t('No se puedo actualizar el nombre de la linea. Intentalo mas tarde.'), 'error');
    }
}

/** Form Editar facturacion * */
function tol_facturacion_form($form, &$form_state, $configFactura) {

    $form = array();
    $form['factura_electronica'] = array(
        '#type' => 'fieldset',
        '#title' => t('Factura Electronica'),
        '#weight' => 0,
        '#collapsible' => FALSE,
    );

    $form['factura_electronica']['recibir_factura_elec'] = array(
        '#type' => 'checkbox',
        '#title' => t('Recibir factura'),
        //'#options' => $recibir_factura_electronica,
        '#default_value' => $configFactura['recibir_elec'],
    );

    $form['factura_electronica']['correo'] = array(
        '#type' => 'textfield',
        '#title' => t('Email'),
        '#default_value' => $configFactura['email'],
    );
    /*
      $form['factura_electronica']['detalle_factura_elec'] = array(
      '#type' => 'radios',
      '#title' => t('Detalle de factura'),
      '#options' => $detalle_factura_fisica,
      '#default_value' => $configFactura['elec_detalle'],
      );

     */
    if ($configFactura['show_factura_fisica']) {
        // Fieldset factura fisica
        $form['factura_fisica'] = array(
            '#type' => 'fieldset',
            '#title' => t('Factura fisica'),
            '#weight' => 0,
            '#collapsible' => FALSE,
        );

        $form['factura_fisica']['recibir_factura_fis'] = array(
            //'#type' => 'radios',
            '#type' => 'checkbox',
            '#title' => t('Recibir factura'),
            //'#options' => $recibir_factura_fisica,
            '#disabled' => variable_get('tol_is_fact_fisica_editable', TRUE),
            '#default_value' => $configFactura['recibir_fis'],
        );

        $form['factura_fisica']['direccion'] = array(
            '#type' => 'textfield',
            '#title' => t('Direcci&oacute;n'),
            '#default_value' => $configFactura['direccion'],
        );

        $form['factura_fisica']['telefono'] = array(
            '#type' => 'textfield',
            '#title' => t('Tel&eacute;fono'),
            '#default_value' => $configFactura['telefono'],
        );
    }
    /*
     * Solicitan ocultar el campo departamento y ciudad para todos los paises
      if($configFactura['showfielddepartamento']){
      // Departamento
      $v = taxonomy_vocabulary_machine_name_load('city');
      $terms = taxonomy_get_tree($v->vid, 0, 1, false);
      $departament_options = array();
      $departament_options[0] = '- Seleccione -';
      //$city_child = array();
      foreach ($terms as $key => $value) {
      $departament_options[$value->tid] = $value->name;
      }

      //Modo select via Ajax RVS 20130627
      $form['factura_fisica']['departamento'] = array(
      '#title' => t('Departamento'),
      '#type' => 'select',
      '#options' => $departament_options,
      '#default_value' => $configFactura['departamento'], //ASI NO FUNCIONA //CHECK
      '#ajax' => array(
      'event' => 'change',
      'callback' => 'tol_ajax_dropdown_cities_fact',
      'wrapper' => 'factura-fisica-city-wrapper',
      ),
      );

      // Wrapper for city dropdown list
      $form['factura_fisica']['tol_ajax_dropdown']['wrapper'] = array(
      '#prefix' => '<div id="factura-fisica-city-wrapper">',
      '#suffix' => '</div>',
      );


      // Ciudad
      // Options for city dropdown list
      $cities_options = array('- Seleccione -');
      if (isset($form_state['values']['departamento'])) {
      $cities_options = _tol_load_cities($form_state['values']['departamento']);
      }

      // Province dropdown list
      $form['factura_fisica']['tol_ajax_dropdown']['wrapper']['ciudad'] = array(
      '#title' => t('C&iacute;udad'),
      '#type' => 'select',
      '#options' => $cities_options,
      '#default_value' => $configFactura['ciudad'], //ASI NO FUNCIONA //CHECK
      );
      }

     */

    if ($configFactura['showFormatoFactura']) {

//    if (variable_get('tol_showFormatoFactura', true)) {
        // Fieldset formato factura
        $form['factura_formato'] = array(
            '#type' => 'fieldset',
            '#title' => t('Formato Factura'),
            '#weight' => 0,
            '#collapsible' => FALSE,
        );

        $form['factura_formato']['formato'] = array(
            '#type' => 'radios',
            '#title' => t('Formato'),
            '#options' => array(1 => t('Detallado'), 0 => t('Resumido')),
            '#default_value' => @$configFactura['formato'],
        );
    }
    $form['guardar'] = array(
        '#type' => 'submit',
        '#value' => t('Guardar'),
        '#name' => 'continue',
        '#attributes' => array('class' => array('form-send')),
    );

    $form['cancelar'] = array(
        '#type' => 'submit',
        '#value' => t('Cancelar'),
        '#name' => 'cancelar',
        '#submit' => array('tol_facturacion_cancel_button'),
        '#attributes' => array('class' => array('form-cancel')),
    );

    return $form;
}

/**
 * Function for handling ajax request
 */
function tol_ajax_dropdown_cities_fact($form, $form_state) {
    // Return the dropdown list including the wrapper
    return $form['factura_fisica']['tol_ajax_dropdown']['wrapper'];
}

function tol_facturacion_cancel_button($form, &$form_state) {
    $url = !empty($_GET['destination']) ? $_GET['destination'] : 'online/facturacion';
    drupal_goto($url);
}

function tol_facturacion_form_submit($form, &$form_state) {

    //1 = Fac fÃ­sica. 2 = Fac electonica. 3 = Both

    if ($form_state['values']['recibir_factura_elec'] && $form_state['values']['recibir_factura_fis']) {
        $factura_fis_elec = 3;
    } else if ($form_state['values']['recibir_factura_elec']) {
        $factura_fis_elec = 2;
    } else if ($form_state['values']['recibir_factura_fis']) {
        $factura_fis_elec = 1;
    } else {
        drupal_set_message(t('No pudimos completar tu solicitud, debes seleccionar al menos un tipo de factura.'), 'error');
        drupal_goto('online/facturacion/editar');
    }

    if (variable_get("tigoapi_country_iso") == "CO") { //Si en Colombia el invoiceType es en espaÃ±ol...
        $invoiceType = 'RESUMIDA';
        $invoiceTypeNumber = '0';
        if ($form_state['values']['formato'] == '1') {
            $invoiceType = 'DETALLADA';
            $invoiceTypeNumber = '1';
        }
    } else {
        $invoiceType = 'SUMMARY';
        if ($form_state['values']['formato'] == '1') {
            $invoiceType = 'DETAIL';
        }
    }
    $detailOption = null;
    if (variable_get('tigoapi_endpoint') == variable_get('enableDisableElectronicInvoice_endpoint')) {
        module_load_include('inc', 'tigoapi');
        $tigo = TigoAPI::getInstance();
    } else {
        //EPA ESTO ESTA FALLANDO!!
        module_load_include('inc', 'tigoapi', 'enableDisableElectronicInvoice');
        $tigo = enableDisableElectronicInvoiceClient::getInstance();
    }
    if (variable_get("tigoapi_country_iso") == "CO") {
        $_SESSION['factura_fis_elec'] = $factura_fis_elec;
        $_SESSION['invoiceType'] = $invoiceTypeNumber;
    }

    $resultServ = $tigo->EnableDisableElectronicInvoice($_SESSION['my_line'], $factura_fis_elec, $invoiceType, $detailOption, 'ENABLE');
//error_log("EnableDisableElectronicInvoice : resultServ ".print_r($resultServ, TRUE)."\n",3,'/mnt/logs/drupal/servicios.log');
    if (@$resultServ->status != "OK" && @$resultServ->success != 1) { //el && es un parche para colombia
        //if ( FALSE ){ //OJO un success  y un sucess
        drupal_set_message(t('No se pudo actualizar las opciones de su facturacion. Por favor intentalo mas tarde.'), 'error');
    } else {

        //Aqui hace falta llamar a UpdateClientInfo();
        //Donde meto los datos de facturacion? Direccion? Departamento? Ciudad?
        global $user;
        $account = user_load($user->uid, true);
        $docType = null;
        if (!empty($account->field_tipo_documento[LANGUAGE_NONE][0]['tid'])) {
            $tid = $account->field_tipo_documento[LANGUAGE_NONE][0]['tid'];
            $docType = taxonomy_term_load($tid);
            $docType = $docType->name;
        }

        $datos = array(
            'msisdn' => $_SESSION['my_line'],
            'documentType' => $docType,
            'documenNumber' => @$account->field_nro_documento[LANGUAGE_NONE][0]['value'],
            'documentExpeditionDate' => '',
            'nationality' => '',
            'clientCode' => '',
            'name' => '',
            'firstLastName' => '',
            'secondLastName' => '',
            'phoneNumber' => '',
            'email' => $form_state['values']['correo'],
            'fax' => '',
            'ruc' => '',
            'businessName' => '',
            'clientType' => '',
            'subType' => '',
            'economicActivity' => '',
            'admissionDate' => '',
            'segmentation' => '',
            'scoring' => '',
            'baseCurrency' => '',
            'urlClient' => '',
            'guaranteesNumber' => '',
            'subClientState' => '',
            'clientState' => '',
            'genre' => '',
            'address' => $form_state['values']['direccion'],
        );

        module_load_include('inc', 'tigoapi', 'tigoapi');
        $tigo = TigoAPI::getInstance(); //new TigoAPIService();

        $result = $tigo->UpdateClientInfo($datos); //ESTE METODO NO ESTA EN TIGOAPPS
//	error_log("UpdateClientInfo : result ".print_r($result, TRUE)."\n",3,'/mnt/logs/drupal/servicios.log');

        $today = date("Y-m-d, g:i:s a");

        /*
          _UpdateClientInfo($data = array()) {

          $items = array(
          'documenNumber' => '', *
          'documentType' => '', *
          'documentExpeditionDate' => '',
          'nationality' => '',
          'clientCode' => '',
          'name' => '',
          'firstLastName' => '',
          'secondLastName' => '',
          'phoneNumber' => '',
          'email' => '',
          'fax' => '',
          'ruc' => '',
          'businessName' => '',
          'clientType' => '',
          'subType' => '',
          'economicActivity' => '',
          'admissionDate' => '',
          'segmentation' => '',
          'scoring' => '',
          'baseCurrency' => '',
          'urlClient' => '',
          'guaranteesNumber' => '',
          'subClientState' => '',
          'clientState' => '',
          'genre' => '',
          );

         */


        $configFactura = _tol_obtener_config_factura(); //llamada a metodo que busca en BD

        if (empty($configFactura)) {
            $factura = _tol_factura_general_create(); //creo factura nueva para almacenar en BD
        } else {
            $factura = $configFactura;
        }

        $factura->field_linea_factura['und'][0]['value'] = $_SESSION['my_line'];
        $factura->field_factura_fis_elec['und'][0]['value'] = $factura_fis_elec;
        $factura->field_factura_correo['und'][0]['value'] = $form_state['values']['correo'];
        $factura->field_direccion['und'][0]['value'] = $form_state['values']['direccion'];

        //epa epa
        //$factura->field_factura_det_res['und'][0]['value'] = $detalle_factura_fis;

        $factura->field_factura_det_res['und'][0]['value'] = $form_state['values']['formato'];



        //$factura->field_factura_departamento['und'][0]['value'] = $form_state['values']['departamento'];
        //$factura->field_factura_ciudad['und'][0]['value'] = $form_state['values']['ciudad'];
        /*
          if (!empty($form_state['values']['departamento']))
          $factura->field_factura_departamento['und'][0]['tid'] = $form_state['values']['departamento']; //DEBEN SER TID (taxonomia)
          if (!empty($form_state['values']['ciudad']))
          $factura->field_factura_ciudad['und'][0]['tid'] = $form_state['values']['ciudad']; //DEBEN SER TID (taxonomia)
         */

        $factura->field_factura_telefono['und'][0]['value'] = $form_state['values']['telefono'];

        //$resultSave = _tol_factura_general_save($factura); //guardo en BD
        drupal_set_message(t('Opciones de su facturacion guardadas con exito.'), 'status');
        drupal_goto('/online/facturacion');
    }
}

/* form Factura historial */

function tol_facturacion_historial_form($form, &$form_state) {
    $form = array();

    $form['date_desde'] = array(
        '#type' => 'date_popup',
        '#title' => t('Desde:'),
        '#date_format' => 'd-m-Y',
        '#date_year_range' => '-100:+0',
        '#default_value' => empty($date) ? '' : date('Y-m-d H:i:s', $date),
    );

    $form['date_hasta'] = array(
        '#type' => 'date_popup',
        '#title' => t('Hasta:'),
        '#date_format' => 'd-m-Y',
        '#date_year_range' => '-100:+0',
        '#default_value' => empty($date) ? '' : date('Y-m-d H:i:s', $date),
    );

    $form['lista'] = array(
        '#type' => 'submit',
        '#value' => t('Lista'),
        '#name' => 'lista',
    );
    $form['cuadricula'] = array(
        '#type' => 'submit',
        '#value' => t('Cuadricula'),
        '#name' => 'cuadricula',
    );
    return $form;
}

function tol_facturacion_historial_submit($form, &$form_state) {
    //AQUI VA LA LÃGICA DE NEGOCIO
}

//Added RVS 20130603
/* form Factura Pago */
function tol_facturacion_pago_form($form, &$form_state) {

    global $user, $base_url;


    $msisdn = tol_get_current_msisdn();
    $date = date('Y-m-d', time() - 86400); //un dia menos
    $query = db_select('tigo_transaccion_pagos_online_full_info', 'fac')
            ->condition('fac.uid', $user->uid, '=') //uid usuario
            ->condition('fac.telefono', $msisdn, '=') //numero tlf. el usuario puede tener varias lineas
            ->condition('fac.estado_pol', '4', '=') // pago aprobado
            ->condition('fac.codigo_respuesta_pol', '1', '=') // pago aprobado
            ->condition('fecha_transaccion', $date, '>')
            ->fields('fac', array('id_transaccion', 'fecha_insercion', 'uid', 'pago_fac', 'estado_pol', 'codigo_respuesta_pol'))
            ->orderBy('fecha_insercion', 'DESC') //ORDER BY fecha_insercion
            ->range(0, 1)
            ->execute()
            ->fetchAssoc();

    if (!empty($query)) {
        return null;
    }

    //load values
    $factura_loaded = _tol_obtener_config_factura();

    module_load_include('inc', 'tigoapi');
    $tigo = TigoAPI::getInstance();

    $result = $tigo->GetAccountDebt($msisdn);


    if (!isset($result) || empty($result->balance) || $result->balance <= 0) {
        return;
    }

    if (variable_get("tigoapi_country_iso") == "CO")
        $fac_ref = @$result->contract;
    else
        $fac_ref = @$result->lastInvoiceNumber;

    $correo = $user->mail;
    $factura_valor = ceil(@$result->balance);
    if ($factura_valor <= 0)
        return;


    $llave_encripcion = variable_get('tol_pagos_online_pass'); //llave_encripcion = 1291e846533
    $usuarioId = variable_get('tol_pagos_online_user'); //usuarioId = 59527
    $refVenta = $fac_ref . date('His');
    //$descripcion = $fac_ref . '|' . $msisdn;
    $descripcion = "Referencia de pago No " . $fac_ref;
    $valor = $factura_valor;
    $iva = 0;
    $baseDevolucionIva = 0;
    $moneda = variable_get('tol_pagos_online_moneda');
    $firma_cadena = "$llave_encripcion~$usuarioId~$refVenta~$valor~$moneda";
    $firma = md5($firma_cadena);

    $form = array();

    $form['#method'] = 'post';

    $form['#action'] = variable_get('tol_factura_url_de_pago');
    //$form['#action'] = 'https://gateway2.pagosonline.net/apps/gateway/index.html'; //url de prueba

    $form['buttons']['submit'] = array(
        '#type' => 'submit',
        //'#name' => 'submit',
        '#value' => t('Pagar'),
        '#attributes' => array('class' => array('payment')),
    );

    /* OBLIGATORIO */
    $form['userid'] = array(
        '#type' => 'hidden',
        //'#type' => 'textfield',
        '#name' => 'usuarioId',
        '#value' => $usuarioId,
    );

    $form['refVenta'] = array(
        '#type' => 'hidden',
        //'#type' => 'textfield',
        '#name' => 'refVenta',
        '#value' => $refVenta,
    );

    $form['descripcion'] = array(
        '#type' => 'hidden',
        '#name' => 'descripcion',
        '#value' => $descripcion,
    );

    $form['valor'] = array(
        '#type' => 'hidden',
        '#name' => 'valor',
        '#value' => $valor,
    );

    $form['iva'] = array(
        '#type' => 'hidden',
        '#name' => 'iva',
        '#value' => $iva,
    );

    $form['basedev'] = array(
        '#type' => 'hidden',
        '#name' => 'baseDevolucionIva',
        '#value' => $baseDevolucionIva,
    );

    $form['firma'] = array(
        '#type' => 'hidden',
        '#name' => 'firma',
        '#value' => $firma,
    );

    /* COMPLEMENTOS */
    $form['emailComprador'] = array(
        '#type' => 'hidden',
        //'#type' => 'textfield',
        '#name' => 'emailComprador',
        '#value' => $correo,
    );

    $form['extra1'] = array(
        '#type' => 'hidden',
        '#name' => 'extra1',
        '#value' => $msisdn,
    );

    $form['extra2'] = array(
        '#type' => 'hidden',
        '#name' => 'extra2',
        '#value' => $user->uid,
    );

    $form['moneda'] = array(
        '#type' => 'hidden',
        '#name' => 'moneda',
        '#value' => $moneda,
    );

    $form['telefonoMovil'] = array(
        '#type' => 'hidden',
        '#name' => 'telefonoMovil',
        '#value' => $msisdn,
    );

    $form['prueba'] = array(
        '#type' => 'hidden',
        '#name' => 'prueba',
        '#value' => 0, //RVS 20130208
            //'#value' => 1, //RVS 20130208
    );

    $form['url_respuesta'] = array(
        '#type' => 'hidden',
        //'#type' => 'textfield',
        '#name' => 'url_respuesta',
        //'#value' => url('respuesta_pagosonline', array('absolute' => TRUE)),
        '#value' => url('online/facturacion/respuesta_pagosonline', array('absolute' => TRUE)),
    );

    $form['url_confirmacion'] = array(
        '#type' => 'hidden',
        //'#type' => 'textfield',
        '#name' => 'url_confirmacion',
        //'#value' => url('confirmacion_pagosonline', array('absolute' => TRUE)),
        '#value' => url('online/facturacion/confirmacion_pagosonline', array('absolute' => TRUE)),
    );

    return $form;
}

function tol_facturacion_pago_form_submit($form, &$form_state) {
    
}

function tol_user_delete($account) {
    if (is_numeric($account->uid)) {
        module_load_include('inc', 'tol', 'lib/lines');
        $lineDB = new TOL_lines();
        $lineDB->delete_all($account->uid);
        tol_clear_cache();
    }
}

function tol_get_plan_info() {

    //$msisdn=tol_get_current_msisdn();    
    $value = tol_get_account_data();
    
//error_log("tol_get_plan_info : ".print_r($value, TRUE)."\n",3,'/mnt/logs/drupal/servicios.log');
    $informacion = array(
        'RE' => t('Su lÃ­nea esta reportada como suspendida por robo o perdida'),
        'AC' => t(''),
        'ACTIVO' => t(''),
        'SU' => t('Su servicio se encuentra suspendido'),
        'BLOQUEO POR MORA' => t('Su servicio se encuentra suspendido por mora'),
    );

    $estado = array(
        'EL' => t('Desconocida'),
        'RE' => t('Reportada'),
        'AC' => t('Activa'),
        'SU' => t('Suspendido'),
        'RO' => t('Robada'),
        'SP' => t('Robada'),
        'SR' => t('Solo Recibe'),
        'MO' => t('Moroso'),
        'LI' => t('Limite'),
        'ACTIVO' => t('Activa'),
        'INACTIVO' => t('Desconocida'),
        'BLOQUEO POR MORA' => t('Bloqueo por mora'),
        'ROBADO' => t('Robada'),
        'SUSPENDIDO' => t('Suspendido'),
        'OTRO' => t('Otro'),
        'W' => t('Prepago Activo'),
        '2' => t('Pospago Activo'),
        'Y' => t('Prepago Activo'),
        ']' => t('Disponible para Venta'),
        '3' => t('Reservado'),
        '.' => t('Proceso de reciclaje'),
        'Ã' => t('Disponible para venta'),
        'Ã' => t('Disponible para venta'),
        'R' => t('Desactivado por Robo'),
        'S' => t('DesactivaciÃ³n Definitiva'),
        'G' => t('Desactivado por falta de datos'),
        'B' => t('DesactivaciÃ³n BYPASS'),
        'K' => t('Desactivado x Mora'),
        'F' => t('Desactivado Datos InvÃ¡lidos'),
        'N' => t('DesactivaciÃ³n Salientes'),
        'e' => t('DesactivaciÃ³n ExtorsiÃ³n'),
        'Ã' => t('RESERVADO Cambio de Numeros'),
        'P' => t('Desactivado por falta de datos'),
        '5' => t('DesactivaciÃ³n Temporal'),
        'Ãª' => t('Desactivado por Robo'),
        '&' => t('Desactivado a PeticiÃ³n de Cliente'),
        'L' => t('Reservado Prepago'),
        '?' => t('RESERVADO Iridium Nac'),
        'r' => t('Reservados Ingenieria'),
        '%' => t('NotificaciÃ³n 80% de Consumo'),
        '@' => t('DISPONIBLE (SIEBEL)'),
        'Ã' => t('CUASI-FIJA (DISPONIBLE)'),
        'm' => t('Reservados (Mascaras CD)'),
        'c' => t('Reservados (Conatel)'),
        'i' => t('ACTIVO (Iridium Intl)'),
        'X' => t('PARA RECICLAJE'),
        '0' => t('Reservado Rescue Chip'),
        '1' => t('DISPONIBLE'),
        'Q' => t('DESACTIVADO x CHEQUE RECHAZADO'),
        '^' => t('DISPONIBLE (Iridium Nac.)'),
        'H' => t('DISPONIBLE PARA VENTA'),
        '~' => t('DISPONIBLE (Iridium-Intl)'),
        'J' => t('Rechaza actualizar datos'),
        'C' => t('Desactivado falta de pago'),
        'Z' => t('DesactivaciÃ³n Llamadas Entrantes'),
        'M' => t('RESERVADO PREPAGO'),
        'I' => t('INVESTIGACION (FALTA DE ANEXO)'),
        'a' => t('Reservados (Roaming)'),
        '+' => t('DESACTIVADO (Iridium Intl)'),
        'Â¿' => t('RESERVADO (Iridium Intl)'),
        'Ã' => t('DISPONIBLE PARA VENTA'),
        'D' => t('ACTIVO EN ALQUILER'),
        'A' => t('AGENCIA'),       
        
    );

    if (!empty($value->accountState)) {
        $state = strtoupper($value->accountState);
    } elseif (!empty($ContractType->state)) {
        $state = strtoupper($ContractType->state);
    } elseif (!empty($value->services->AssetServiceType->state)) {
        $state = strtoupper($value->services->AssetServiceType->state);
    }

    if (!empty($value->plans->PlanType)) {
        if (is_array($value->plans->PlanType)) {
            $plan = $value->plans->PlanType[0];
        } else {
            $plan = $value->plans->PlanType;
        }
    }

    return array(
        'name' => @$plan->planName,
        'state' => @$estado[$state],
        'info' => @$informacion[$state],
        'type' => isset($plan->planType) ? $plan->planType : '*'
    );
}

function tol_get_account_data() {

    $result = _tol_obtener_datos_cliente(); //llamada a metodo que contiene la llamada al servicio


    if (isset($result->contracts->ContractType)) {

        $msisdn = tol_get_current_msisdn();

        $ContractTypeArray = $result->contracts->ContractType;
        if (!is_array($ContractTypeArray)) {
            $ContractTypeArray = array($ContractTypeArray);
        }

        foreach ($ContractTypeArray as $ContractType) {

            $accounts = @$ContractType->accounts->AssetType;
            if (!is_array($accounts)) {
                $accounts = array($accounts);
            }

            foreach ($accounts as $value) {
                if (isset($value->msisdn) && $value->msisdn == $msisdn) {
                    return @$value;
                }
            }
        }
    }
    return false;
}

/* form Factura detalle */

function tol_factura_detalle_form($form, &$form_state) {
    $form = array();
    $form['nombre'] = array(
        '#type' => 'textfield',
        '#title' => t('Nombre'),
    );
    $form['apellido'] = array(
        '#type' => 'textfield',
        '#title' => t('Apellido'),
    );
    $form['targeta'] = array(
        '#type' => 'textfield',
        '#title' => t('Targeta'),
    );
    $form['nro_targeta'] = array(
        '#type' => 'textfield',
        '#title' => t('Nro de targeta'),
    );
    $form['fecha_vencimiento'] = array(
        '#title' => t('Fecha de venc.'),
        '#type' => 'date',
        '#default_value' => array(
            'day' => format_date(time(), 'custom', 'd'),
            'month' => format_date(time(), 'custom', 'n'),
            'year' => format_date(time(), 'custom', 'Y'),
        ),
    );
    $form['codigo_seguridad'] = array(
        '#type' => 'textfield',
        '#title' => t('Cod. de Seguridad'),
    );

    $form['continue'] = array(
        '#type' => 'submit',
        '#value' => t('Pagar'),
        '#name' => 'continue',
    );

    return $form;
}

function tol_factura_detalle_submit($form, &$form_state) {
    //AQUI VA LA LÃGICA DE NEGOCIO
}

/* form Editar mis datos */

function tol_mis_datos_form($form, &$form_state, $variables) {

    $form = array();

    //$editP = variable_get('tol_flag_modifiable_field_nombre', true);
    $form['nombre'] = array(
        '#type' => 'textfield',
        '#title' => t('Nombre'),
        '#required' => TRUE,
        '#default_value' => $variables['nombre'],
        //'#disabled' => (($variables['dataPlan'] == 'PRE') ? $editP : true),
        '#disabled' => $variables['editablefieldnombre'],
        '#attributes' => ($variables['editablefieldnombre'] ? array('class' => array('form-text')) : array('class' => array('form-text-required'))),
    );

    //$editP = variable_get('tol_flag_modifiable_field_apellido', true);
    $form['apellido'] = array(
        '#type' => 'textfield',
        '#title' => t('Apellido'),
        '#required' => TRUE,
        '#default_value' => $variables['apellido'],
        //'#disabled' => (($variables['dataPlan'] == 'PRE') ? $editP : true),
        '#disabled' => $variables['editablefieldapellido'],
        '#attributes' => ($variables['editablefieldapellido'] ? array('class' => array('form-text')) : array('class' => array('form-text-required'))),
    );

    // Tipo Documento
    $v = taxonomy_vocabulary_machine_name_load('type_document');
    $terms = taxonomy_get_tree($v->vid);
    $type_document_options = array();

    $city_child = array();
    foreach ($terms as $key => $value) {
        $type_document_options[$value->tid] = $value->name;
    }

    //$editP = variable_get('tol_flag_modifiable_field_tipo_documento', true);
    $form['tipo_documento'] = array(
        '#type' => 'select',
        '#title' => t('Tipo de documento'),
        '#options' => $type_document_options,
        '#required' => variable_get('tol_flag_required_field_tipo_documento', 0),
        '#default_value' => $variables['tipo_dni'],
        //'#default_value' => $type_document_options,
        //'#disabled' => (($variables['dataPlan'] == 'PRE') ? $editP : true),
        '#disabled' => $variables['editablefieldtipodocumento'],
        '#attributes' => ($variables['editablefieldtipodocumento'] ? array('class' => array('form-select')) : array('class' => array('form-select-required'))),
    );

    //$editP = variable_get('tol_flag_modifiable_field_numero_documento', true);
    $form['numero_documento'] = array(
        '#type' => 'textfield',
        '#title' => t('N&uacute;mero de documento'),
        '#required' => TRUE,
        '#default_value' => $variables['nro_dni'],
        //'#disabled' => (($variables['dataPlan'] == 'PRE') ? $editP : true),
        '#disabled' => $variables['editablefieldnumerodocumento'],
        '#attributes' => ($variables['editablefieldnumerodocumento'] ? array('class' => array('form-text')) : array('class' => array('form-text-required'))),
    );

    $form['direccion'] = array(
        '#type' => 'textfield',
        '#title' => t('Direcci&oacute;n'),
        '#default_value' => $variables['direccion'],
        //'#disabled' => variable_get('tol_flag_modifiable_field_direccion', true),
        '#disabled' => $variables['editablefielddireccion'],
        '#attributes' => ($variables['editablefielddireccion'] ? array('class' => array('form-text')) : array('class' => array('form-text-required'))),
    );

    /* Solicitan ocultar el campo departamento y ciudad para todos los paises
      // Departamento
      $v = taxonomy_vocabulary_machine_name_load('city');
      $terms = taxonomy_get_tree($v->vid, 0, 1, false);
      $departament_options = array();
      $departament_options[0] = '- Seleccione -';
      //$city_child = array();
      foreach ($terms as $key => $value) {
      $departament_options[$value->tid] = $value->name;
      }

      //Modo select via Ajax RVS 20130627
      $form['departamento'] = array(
      '#title' => t('Departamento'),
      '#type' => 'select',
      '#options' => $departament_options,
      '#default_value' => $variables['departamento'],
      '#ajax' => array(
      'event' => 'change',
      'callback' => 'tol_ajax_dropdown_cities',
      'wrapper' => 'city-wrapper',
      ),
      );

      // Wrapper for city dropdown list
      $form['tol_ajax_dropdown']['wrapper'] = array(
      '#prefix' => '<div id="city-wrapper">',
      '#suffix' => '</div>',
      );


      // Options for city dropdown list
      $cities_options = array('- Seleccione -');
      $form_state['values']['departamento'] =$variables['departamento'];
      if (isset($form_state['values']['departamento'])) {
      $cities_options = _tol_load_cities($form_state['values']['departamento']);
      }

      // Province dropdown list
      $form['tol_ajax_dropdown']['wrapper']['ciudad'] = array(
      '#title' => t('C&iacute;udad'),
      '#type' => 'select',
      '#default_value' => $variables['ciudad'],
      '#options' => $cities_options,
      );

     */
    $form['telefono'] = array(
        '#type' => 'textfield',
        '#title' => t('T&eacute;lefono de contacto'),
        '#required' => TRUE,
        '#default_value' => $variables['telefono'],
        '#disabled' => $variables['editablefieldtelefono'],
        '#attributes' => ($variables['editablefieldtelefono'] ? array('class' => array('form-text')) : array('class' => array('form-text-required'))),
    );


//NOS HABIAN INDICADO QUE EL CORREO NO ERA EDITABLE PARA NINGUN CASO, CONFIRMAR
    $form['correo'] = array(
        '#type' => 'textfield',
        '#title' => t('Correo'),
        '#required' => TRUE,
        '#default_value' => $variables['correo'],
        '#disabled' => $variables['editablefieldcorreo'],
        '#attributes' => ($variables['editablefieldcorreo'] ? array('class' => array('form-text')) : array('class' => array('form-text-required'))),
    );

    $form['aceptar'] = array(
        '#type' => 'submit',
        '#value' => t('Aceptar'),
        '#name' => 'continue',
        '#attributes' => array('class' => array('form-send')),
    );

    $form['cancelar'] = array(
        '#type' => 'submit',
        '#value' => t('Cancelar'),
        '#submit' => array('tol_mis_datos_cancel_button'),
        '#limit_validation_errors' => array(),
        '#attributes' => array('class' => array('form-cancel')),
    );
    return $form;
}

/**
 * Function for handling ajax request
 */
function tol_ajax_dropdown_cities($form, $form_state) {

    // Return the dropdown list including the wrapper
    return $form['tol_ajax_dropdown']['wrapper'];
}

function tol_mis_datos_cancel_button($form, &$form_state) {
    $url = isset($_GET['destination']) ? $_GET['destination'] : 'online/mis-lineas/mis-datos';
    drupal_goto($url);
}

function tol_mis_datos_form_validate($form, &$form_state) {

    if (form_get_errors())
        return false;

    if (!is_numeric($form_state['values']['telefono'])) {
        form_set_error('telefono', t('El nÃºmero de telÃ©fono debe ser numÃ©rico'));
    }

    if ((variable_get('tol_flag_required_service_validation', 0) == 1)) {
        //Validacion con servicios de tigo

        $documentType = $form_state['values']['tipo_documento'];

        $term = taxonomy_term_load($documentType);

        if ($term) {
            $documentType = $term->name;
        }

        $documentNumber = $form_state['values']['numero_documento'];
        $account = $form_state['values']['telefono'];

        module_load_include('inc', 'tigoapi', 'tigoapi');
        $tigo = TigoAPI::getInstance(); //new TigoAPIService();

        $result = $tigo->ValidateClientAccount($documentType, $documentNumber, $account); //ESTE METODO NO ESTA EN TIGOAPPS

        if (isset($result->success)) {
            $is_ok = true;
            $is_success = $result->success;
            if (!$is_success) {
                form_set_error('field_msisdn', t('La informaciÃ³n ingresada no es valida'));
            }
        } else {
            form_set_error('tol', t('En estos momentos no podemos validar la informaciÃ³n, intente mas tarde'));
        }
    }
}

function tol_mis_datos_form_submit($form, &$form_state) {

    // Guardo los datos
    global $user;
    $userinfo = user_load($user->uid, true);

    module_load_include('inc', 'tigoapi', 'tigoapi');
    $tigo = TigoAPI::getInstance(); //new TigoAPIService();

    $msisdn = tol_get_current_msisdn();

    $datos = $tigo->GetClientAccountGeneralInfo($msisdn, 1, 1, 1);

    if (isset($datos->ClientType->clientCode)) {
        $clientCode = $datos->ClientType->clientCode;
    } else {
        $clientCode = '';
    }

    $new_user_info = array(
        /*
          'field_ciudad' => array(//DEBEN SER TID (taxonomia) Justo ahora esta como value
          'und' => array(
          0 => array(
          'tid' => $form_state['values']['ciudad'],
          ),
          ),
          ),
          'field_departamento' => array(//DEBEN SER TID (taxonomia) Justo ahora esta como value
          'und' => array(
          0 => array(
          'tid' => $form_state['values']['departamento'],
          ),
          ),
          ), */
        'field_direccion_user' => array(
            'und' => array(
                0 => array(
                    'value' => $form_state['values']['direccion'],
                ),
            ),
        ),
        'field_user_fullname' => array(
            'und' => array(
                0 => array(
                    'value' => $form_state['values']['nombre'] . ' ' . $form_state['values']['apellido'],
                ),
            ),
        ),
            /*
              'field_tipo_documento' => array(
              'und' => array(
              0 => array(
              'tid' => $form_state['values']['field_tipo_documento'],
              ),
              ),
              ),

              'field_nro_documento' => array(
              'und' => array(
              0 => array(
              'value' => $form_state['values']['field_nro_documento'],
              ),
              ),
              ),
             */
    );


    $docType = null;
    if (!empty($form_state['values']['tipo_documento'])) {
        $tid = $form_state['values']['tipo_documento'];
        $docType = taxonomy_term_load($tid);
        $docType = $docType->name;
    }
    $datos = array(
        'msisdn' => $_SESSION['my_line'],
        'documentType' => $docType,
        'documenNumber' => $form_state['values']['numero_documento'],
        'documentExpeditionDate' => '',
        'nationality' => '',
        'clientCode' => $clientCode,
        'name' => $form_state['values']['nombre'],
        'firstLastName' => $form_state['values']['apellido'],
        'secondLastName' => '',
        'phoneNumber' => $form_state['values']['telefono'],
        'email' => $form_state['values']['correo'],
        'fax' => '',
        'ruc' => '',
        'businessName' => '',
        'clientType' => '',
        'subType' => '',
        'economicActivity' => '',
        'admissionDate' => '',
        'segmentation' => '',
        'scoring' => '',
        'baseCurrency' => '',
        'urlClient' => '',
        'guaranteesNumber' => '',
        'subClientState' => '',
        'clientState' => '',
        'genre' => '',
        'address' => $form_state['values']['direccion'],
    );


    $result = $tigo->UpdateClientInfo($datos); //ESTE METODO NO ESTA EN TIGOAPPS
    //Guardo la informacion del usuario
    $account = user_save($userinfo, $new_user_info);

    drupal_set_message(t('Los datos de tu cuenta han sido modificados exitosamente.'), 'status');

    drupal_goto('online/mis-lineas/mis-datos');
}

// Form Asociar Linea
function tol_asociar_linea_form($form, &$form_state, $variables) {

    $form = array();
    $form['name'] = array(
        '#type' => 'textfield',
        '#title' => t('Nombre'),
        '#required' => true,
    );

    $form['line'] = array(
        '#type' => 'textfield',
        '#title' => t('N&uacute;mero de l&iacute;nea'),
        '#required' => true,
    );

    if ($variables['showTerminosCondiciones']) {
        $form['terms'] = array(
            '#type' => 'checkbox',
            '#title' => t('Acepto los t&eacute;rminos y condiciones.'),
            '#required' => true,
        );
    }
    $form['continue'] = array(
        '#type' => 'submit',
        '#value' => t('Continuar'),
        '#name' => 'continue',
        '#ajax' => array(
            'callback' => 'tol_asociar_linea_form_callback',
            'wrapper' => 'modal',
        ),
    );

    return $form;
}

function tol_asociar_linea_form_validate($form, &$form_state) {
    if (form_get_errors())
        return false;
     
    if (!is_numeric($form_state['values']['line'])) {
        form_set_error('line', t('El nÃºmero de telÃ©fono debe ser numÃ©rico'));
    }
    else{  
		global $user;
		$userinfo = user_load($user->uid, true);
		
		$documentNumber = empty($userinfo->field_nro_documento['und'][0]['value'])? "" :$userinfo->field_nro_documento['und'][0]['value'];
		$documentType = $userinfo->field_tipo_documento['und'][0]['tid'];
		
		$term = taxonomy_term_load($documentType);
		if ($term){
			$documentType = $term->name;
		}
		
		$account = $form_state['values']['line'];
		$value = _tol_obtener_plan_msisdn($account);
		$plan ="";
		if (!empty($value->plans->PlanType)) {
			if (is_array($value->plans->PlanType)) {
				$plan = $value->plans->PlanType[0]->planType;
			} else {
			$plan = $value->plans->PlanType->planType;
			}
		}
		
		if (empty($plan)) {
			form_set_error('line', t('En estos momentos no podemos validar su tipo de plan, intente mas tarde'));
		}
		else{
		
		module_load_include('inc', 'tigoapi', 'tigoapi');
		$tigo = TigoAPI::getInstance();
		//tipos de planes de lineas que el pais no permite agregar - solicitud de HN de bloquear POS, HIB
		$planes = explode(",", variable_get('tigo_login_use_validateclientplantype'));
		
		if (in_array($plan, array_values($planes))) {
			form_set_error('field_msisdn', t('Estimado usuario, este servicio actualmente solo esta disponible para lÃ­neas prepago.'));
		}
		else{
			//tipos de planes para el cual se va a validar el numero de documento - solicitud de HN
			$planes = explode(",", variable_get('tol_plan_validation_document'));
		
			$validar = 0;
			if($planes!="")
			{
				$validar = 0;
		
				if (in_array($plan,array_values($planes))) {
					$validar = 1;
				}
			}
			//---------------------------------------------------
			if (variable_get('tol_flag_required_validation_document') == 1 && $validar== 1) {
				if(empty($documentType) || empty($documentType) || empty($documentNumber) || empty($account))
				{
					form_set_error('field_msisdn', t('Debe completar la informaciÃ³n para que la misma pueda ser validada'));
				}
				else{
					if ($data = $tigo->GetClientAccountGeneralInfo($account, 1, 1, 1)) {
						$data = $data->ClientType;
						$documentTypeFromService= $data->documentType;						
						$documentNumber = trim ($documentNumber);
						$documentNumberFromService = trim ($data->documenNumber);						
											
						if(variable_get("tigoapi_country_iso") == "HN"){
							$documentNumber= ereg_replace("[^A-Za-z0-9]", "", $documentNumber);
							$documentNumberFromService = ereg_replace("[^A-Za-z0-9]", "", $documentNumberFromService);
							$v = taxonomy_vocabulary_machine_name_load('type_document');
							$terms = taxonomy_get_tree($v->vid);
							foreach ($terms as $key => $value) {
								if(in_array($documentTypeFromService,explode(" ", $value->name))){
								 $documentTypeFromService=$value->name;
									}
							}	
						}
						else
						{
							if (is_numeric($documentTypeFromService)) {
								$DocsTypeCodes = array(
									1 => t('Cedula de Identidad Policial'),
									2 => t('Pasaporte'),
									3 => t('Documento Nacional de Identidad'),
									4 => t('Carteira de Identidade'),
									5 => t('AdmisiÃ³n Temporal'),
									6 => t('AdmisiÃ³n Permanente'),
									7 => t('Carnet DiplomÃ¡tico'),
									8 => t('Ninguno - Blanco'),
									9 => t('Carnet Militar'),
									10 => t('RUN'),
									11 => t('Carnet de Extranjero'),
								);
								$documentTypeFromService = $DocsTypeCodes[$documentTypeFromService];
							}
							
						}
  					    //error_log("tol_asociar_linea_form_validate if documentNumber $documentNumber: ".print_r($documentNumberFromService , TRUE)."\n",3,'/mnt/logs/drupal/servicios.log');
						//error_log("tol_asociar_linea_form_validate if documentType $documentType: ".print_r($documentTypeFromService, TRUE)."\n",3,'/mnt/logs/drupal/servicios.log');
	
						if ($documentNumber != $documentNumberFromService || $documentType != $documentTypeFromService) {
							form_set_error('field_msisdn', t('La informaciÃ³n ingresada no es valida'));

							watchdog('tigo_login_registration_validate',"tigo->GetClientAccountGeneralInfo($account, 1, 1, 1) found but no match.");
						}

					} else {
						form_set_error('mail', t('En estos momentos no podemos validar la informaciÃ³n, intente mas tarde'));
					}
				}
			}
	 }
	}
   }
	$errors = form_get_errors();   
	if (empty($errors))
	{
		$_SESSION['asociar-name'] = $form_state['values']['name'];
        $_SESSION['asociar-line'] = $form_state['values']['line'];
	}else{
		return false;
	}
    
}


function tol_asociar_linea_form_submit($form, &$form_state) {
    
}

//function tol_asociar_linea_form_submit($form, &$form_state){
function tol_asociar_linea_form_callback($form, &$form_state) {
    $errors = drupal_get_messages(null, false);

    if (!empty($errors)) {
        $form = render(drupal_get_form('tol_asociar_linea_form'));
        return theme('editar-asociar-linea', array('formulario' => $form));
    };

    $commands = array();

    if (variable_get('tol_flag_required_step_security_code') == '1') {

        $msisdn = $form_state['values']['line'];

        $_SESSION['confirmation-code-msisdn'] = $msisdn; //se guarda en sesion el msisdn

        _tol_sms_msisdn_confirmation($msisdn); //servicio que manda el sms

        $destination = "linea";

        $form = render(drupal_get_form('tol_codigo_seguridad_form', $destination));
        return theme('editar-codigo-seguridad', array('formulario_codigo_seguridad' => $form, 'destination' => $destination));


        //OLD
        //$commands[] = ajax_command_replace('#cboxLoadedContent', tol_editar_codigo_seguridad_page());
        //drupal_goto('online/editar/codigo-seguridad'); //sin ajax
    } else if (variable_get('tol_flag_required_step_enter_document_info') == '1') {

        $form = render(drupal_get_form('tol_documento_form'));
        return theme('editar-documento', array('formulario_documento' => $form));

        // $commands[] = ajax_command_replace('#cboxLoadedContent', tol_editar_documento_page());
        //drupal_goto('online/editar/documento'); //sin ajax
    } else if (variable_get('tol_flag_required_step_security_questions') == '1') {

        $form = render(drupal_get_form('tol_preguntas_form'));
        return theme('editar-preguntas', array('formulario_preguntas' => $form));

        //$commands[] = ajax_command_replace('#cboxLoadedContent', tol_editar_preguntas_page());
        //drupal_goto('online/editar/preguntas'); //sin ajax
    } else {
        _tol_addNewLine();

        global $base_url;
        ctools_include('ajax');
        $commands[] = ctools_ajax_command_redirect($base_url . '/online/resumen');
        return array('#type' => 'ajax', '#commands' => $commands);
    }

    //return  array('#type' => 'ajax', '#commands' => $commands);
}



function _tol_obtener_plan_msisdn($msisdn) {
   
//error_log("_tol_obtener_plan_msisdn : ".print_r($msisdn, TRUE)."\n",3,'/mnt/logs/drupal/servicios.log');
    if (!empty($msisdn)) {
        module_load_include('inc', 'tigoapi', 'tigoapi');
        $tigo = TigoAPI::getInstance();
        $result = $tigo->GetClientAccountGeneralInfo($msisdn, 1, 18, 1);
//error_log("_tol_obtener_plan_msisdn result: ".print_r($result, TRUE)."\n",3,'/mnt/logs/drupal/servicios.log');

        if (isset($result->contracts->ContractType)) {

			$ContractTypeArray = $result->contracts->ContractType;
			if (!is_array($ContractTypeArray)) {
				$ContractTypeArray = array($ContractTypeArray);
			}
//error_log("_tol_obtener_plan_msisdn ContractTypeArray: ".print_r($ContractTypeArray, TRUE)."\n",3,'/mnt/logs/drupal/servicios.log');

			foreach ($ContractTypeArray as $ContractType) {

				$accounts = @$ContractType->accounts->AssetType;
				if (!is_array($accounts)) {
					$accounts = array($accounts);
				}
//error_log("_tol_obtener_plan_msisdn accounts: ".print_r($accounts, TRUE)."\n",3,'/mnt/logs/drupal/servicios.log');

				foreach ($accounts as $value) {
					if (isset($value->msisdn) && $value->msisdn == $msisdn) {
//error_log("_tol_obtener_plan_msisdn value: ".print_r(@$value, TRUE)."\n",3,'/mnt/logs/drupal/servicios.log');

						return @$value;
					}
				}
			}
		}
       
    }
}
  
/** Form Preguntas * */
function tol_preguntas_form($form, &$form_state) {

    $preguntas1 = array(0 => t('Primera Respuesta'), 1 => t('Segunda Respuesta'), 2 => t('Tercera Respuesta'));
    $preguntas2 = array(0 => t('Primera Respuesta'), 1 => t('Segunda Respuesta'), 2 => t('Tercera Respuesta'));
    $preguntas3 = array(0 => t('Primera Respuesta'), 1 => t('Segunda Respuesta'), 2 => t('Tercera Respuesta'));
    $preguntas4 = array(0 => t('Primera Respuesta'), 1 => t('Segunda Respuesta'), 2 => t('Tercera Respuesta'));


    $form = array();
    $form['pregunta1'] = array(
        '#type' => 'radios',
        '#title' => t('Pregunta numero 1'),
        '#options' => $preguntas1,
    );

    $form['pregunta2'] = array(
        '#type' => 'radios',
        '#title' => t('Pregunta numero 2'),
        '#options' => $preguntas2,
    );

    $form['pregunta3'] = array(
        '#type' => 'radios',
        '#title' => t('Pregunta numero 3'),
        '#options' => $preguntas3,
    );

    $form['pregunta4'] = array(
        '#type' => 'radios',
        '#title' => t('Pregunta numero 4'),
        '#options' => $preguntas4,
    );

    $form['continue'] = array(
        '#type' => 'submit',
        '#value' => t('Continuar'),
        '#name' => 'continue',
            /*
              '#attributes' => array(
              'class' => array('close-colorbox'),
              ),
              '#ajax' => array(
              'callback' => 'tol_preguntas_form_callback',
              'wrapper'=>'cboxLoadedContent'
              )
              //Agregar colorbox/nojs
             */
    );

    return $form;
}

/*
  function tol_preguntas_form_validate($form, &$form_state) {

  $today = date("Y-m-d, g:i:s a");
  error_log("tol_preguntas_form_validate $today \n", 3, '/mnt/logs/drupal/zz.log');
  }


  function tol_preguntas_form_submit($form, &$form_state) {
  $today = date("Y-m-d, g:i:s a");
  error_log("tol_preguntas_form_submit $today \n", 3, '/mnt/logs/drupal/zz.log');
  }
 */

//function tol_preguntas_form_submit($form, &$form_state){
function tol_preguntas_form_callback($form, &$form_state) {

    $errors = drupal_get_messages(null, false);
    if (!empty($errors)) {
        $form = render(drupal_get_form('tol_preguntas_form'));
        return theme('editar-preguntas', array('formulario_preguntas' => $form));
    }


//Aqui llamo al servicio de Evidente
//TO DO
//Si las respuestas son correctas entonces salvo
    if (true) { //ARREGLAR
        _tol_addNewLine();

        global $base_url;
        ctools_include('ajax');
        $commands[] = ctools_ajax_command_redirect($base_url . '/online/resumen');
        return array('#type' => 'ajax', '#commands' => $commands);
    }
}

/* form codigo de seguridad */

function tol_codigo_seguridad_form($form, &$form_state, $destination = "linea") {

    $form = array();
    $form['codigo_seguridad'] = array(
        '#type' => 'textfield',
        '#title' => t('C&oacute;digo de seguridad'),
        '#required' => true,
    );

    $form['destination'] = array(
        '#type' => 'hidden',
        '#value' => $destination,
    );

    $form['continue'] = array(
        '#type' => 'submit',
        '#value' => t('Continuar'),
        '#name' => 'continue',
        '#ajax' => array(
            'callback' => 'tol_codigo_seguridad_form_callback',
            'wrapper' => 'modal',
        ),
    );

    return $form;
}

function tol_codigo_seguridad_form_validate($form, &$form_state) {

//	if (form_get_errors()) return false;

    if ($_SESSION['confirmation-code'] != $form_state['values']['codigo_seguridad']) {
        form_set_error('codigo_seguridad', t('El codigo ingresado no coincide. Por favor intentalo de nuevo.'));
    }
}

/*
  function tol_codigo_seguridad_form_submit($form, &$form_state) {

  $today = date("Y-m-d, g:i:s a");
  error_log("tol_codigo_seguridad_form_submit $today \n", 3, '/mnt/logs/drupal/zz.log');
  }
 */

//function tol_codigo_seguridad_form_submit($form, &$form_state){
function tol_codigo_seguridad_form_callback($form, &$form_state) {

    $destination = $form_state['values']['destination'];

    $errors = drupal_get_messages(null, false);
    if (!empty($errors)) {
        $form = render(drupal_get_form('tol_codigo_seguridad_form', $destination));
        return theme('editar-codigo-seguridad', array('formulario_codigo_seguridad' => $form, 'destination' => $destination));
    }
    if ($form_state['values']['destination'] == "resumen/complete-profile")
	{
		drupal_goto('resumen/complete-profile');
	}



    if ($form_state['values']['destination'] == "clave") { //Si es clave voy al proceso de la segunda clave
        $form = render(drupal_get_form('tol_segunda_contrasena_form'));
        return theme('editar-segunda-contrasena', array('formulario_segunda_contrasena' => $form));
    } else { // Voy al proceso de agregar una linea
        if (variable_get('tol_flag_required_step_enter_document_info') == '1') {
            // $commands[] = ajax_command_replace('#cboxLoadedContent', tol_editar_documento_page());
            //drupal_goto('online/editar/documento'); //sin ajax

            $form = render(drupal_get_form('tol_documento_form'));
            return theme('editar-documento', array('formulario_documento' => $form));
        } else if (variable_get('tol_flag_required_step_security_questions') == '1') {

            //$commands[] = ajax_command_replace('#cboxLoadedContent', tol_editar_preguntas_page());

            $form = render(drupal_get_form('tol_preguntas_form'));
            return theme('editar-preguntas', array('formulario_preguntas' => $form));

            //drupal_goto('online/editar/preguntas'); //sin ajax
        } else {
            _tol_addNewLine();

            //drupal_goto('/online/mis-lineas'); //sin ajax

            global $base_url;
            ctools_include('ajax');
            $commands[] = ctools_ajax_command_redirect($base_url . '/online/mis-lineas'); //RVS 20130705
            return array('#type' => 'ajax', '#commands' => $commands);
        }
    }
}

// Form Crear Segunda contrasena
function tol_segunda_contrasena_form($form, &$form_state) {
    global $user;

    $form = array();

    $form['segunda_contrasena'] = array(
        '#type' => 'password',
        '#title' => t('Contrase&ntilde;a'),
        '#required' => TRUE,
    );

    $form['repetir_contrasena'] = array(
        '#type' => 'password',
        '#title' => t('Repetir contrase&ntilde;a'),
        '#required' => TRUE,
    );

    $form['continue'] = array(
        '#type' => 'submit',
        '#value' => t('Continuar'),
        '#name' => 'continue',
        '#ajax' => array(
            'callback' => 'tol_segunda_contrasena_form_callback',
            'wrapper' => 'modal',
        ),
        '#attributes' => array(
            'class' => array('close-colorbox'),
        ),
    );

    return $form;
}

function tol_segunda_contrasena_form_validate($form, &$form_state) {

    if (form_get_errors())
        return false;

    if (!is_numeric($form_state['values']['segunda_contrasena'])) {
        form_set_error('segunda_contrasena', t('La contraseÃ±a debe contener solo caracteres numÃ©ricos'));
    }

    if (!is_numeric($form_state['values']['repetir_contrasena'])) {
        form_set_error('repetir_contrasena', t('La contraseÃ±a debe contener solo caracteres numÃ©ricos'));
    }

    if ($form_state['values']['segunda_contrasena'] != $form_state['values']['repetir_contrasena']) {
        form_set_error('segunda_contrasena', t('Los campos no coindicen. Por favor intente de nuevo '));
    } else if (strlen($form_state['values']['segunda_contrasena']) < 6) {
        form_set_error('segunda_contrasena', t('La contraseÃ±a debe tener al menos 6 caracteres numÃ©ricos'));
    }
}

/*
  function tol_segunda_contrasena_form_submit($form, &$form_state) {

  $today = date("Y-m-d, g:i:s a");
  error_log("tol_segunda_contrasena_form_submit $today \n", 3, '/mnt/logs/drupal/zz.log');
  }
 */

function tol_segunda_contrasena_form_callback($form, &$form_state) {

    $errors = drupal_get_messages(null, false);
    if (!empty($errors)) {
        $form = render(drupal_get_form('tol_segunda_contrasena_form'));
        return theme('editar-segunda-contrasena', array('formulario_segunda_contrasena' => $form));
    }

    global $user;

    $account = user_load($user->uid, true);
    $account->field_segunda_clave['und'][0]['value'] = $form_state['values']['segunda_contrasena'];
    user_save($account);


    $_SESSION['confirmation-code-msisdn'] = null;


    drupal_set_message(t('Su segunda contraseÃ±a ha sido creada con exito.'), 'status');

    global $base_url;
    ctools_include('ajax');
    $commands[] = ctools_ajax_command_redirect($base_url . '/online/mis-lineas/mis-datos');
    return array('#type' => 'ajax', '#commands' => $commands);
}

/* Form Introducir Segunda contrasena */

function tol_into_segunda_contrasena_form($form, &$form_state, $destination = "descargarf") {
    $form = array();

    $form['segunda_contrasena'] = array(
        '#type' => 'password',
        '#title' => t('Contrase&ntilde;a'),
        '#required' => true,
    );

    $form['continue'] = array(
        '#type' => 'submit',
        '#value' => t('Continuar'),
        '#name' => 'continue',
        '#ajax' => array(
            'callback' => 'tol_into_segunda_contrasena_form_callback',
            'wrapper' => 'modal',
        ),
        '#attributes' => array(
            'class' => array('close-colorbox'),
        ),
    );

    return $form;
}

function tol_into_segunda_contrasena_form_validate($form, &$form_state) {

    if (form_get_errors())
        return false;

    if (!is_numeric($form_state['values']['segunda_contrasena'])) {
        form_set_error('segunda_contrasena', t('La contraseÃ±a debe contener solo caracteres numÃ©ricos'));
    }

    if (strlen($form_state['values']['segunda_contrasena']) < 6) {
        form_set_error('segunda_contrasena', t('La contraseÃ±a debe tener al menos 6 caracteres numÃ©ricos'));
    }

    if (form_get_errors())
        return false;

    global $user;
    $account = user_load($user->uid, true);
    $sclaveBD = $account->field_segunda_clave['und'][0]['value'];

    if ($sclaveBD != $form_state['values']['segunda_contrasena']) {
        form_set_error('codigo_seguridad', t('La contraseÃ±a ingresada no coincide. Por favor intentalo de nuevo.'));
    }
}

/*
  function tol_into_segunda_contrasena_form_submit($form, &$form_state) {

  $today = date("Y-m-d, g:i:s a");
  error_log("tol_into_segunda_contrasena_form_submit $today SUBMIT \n", 3, '/mnt/logs/drupal/zz.log');
  }
 */

function tol_into_segunda_contrasena_form_callback($form, &$form_state) {

    $form_state['rebuild'] = TRUE; //added to fix bug drupal.org/node/1787394
    //RVS 20130806 Ojo, ver este URL si hay problemas con el modal box, la configuracion de juntas los archivos JS puede causar este bug
    $commands = null; //added to fix bug
    //$errors = drupal_get_messages(null,false);

    $errors = form_get_errors();
    if (!empty($errors)) {
        $form = render(drupal_get_form('tol_into_segunda_contrasena_form'));
        return theme('segunda-contrasena', array('formulario_into_segunda_contrasena' => $form));
    };

    global $base_url;
    ctools_include('ajax');

    if ($_SESSION['factDestino'] == 'descargarf') {
        //Voy a la descarga
        $factDescargaID = $_SESSION['factDescargaID'];

        $_SESSION['factDescargaID'] = null;
        //$commands[] = ctools_ajax_command_redirect($base_url.'/online/facturacion/descarga?idDes='.$factDescargaID);
        $commands[] = ctools_ajax_command_redirect($base_url . '/online/facturacion?idDes=' . $factDescargaID);
    } else if ($_SESSION['factDestino'] == 'editarf') {
        //Voy a la edicion
        $commands[] = ctools_ajax_command_redirect($base_url . '/online/facturacion/editar');
    }


    $_SESSION['factDestino'] = null;

    return array('#type' => 'ajax', '#commands' => $commands);
}

/* form documento */

function tol_documento_form($form, &$form_state) {
    $form = array();

    // Tipo Documento
    $v = taxonomy_vocabulary_machine_name_load('type_document');
    $terms = taxonomy_get_tree($v->vid);
    $type_document_options = array();
    $city_child = array();
    foreach ($terms as $key => $value) {
        $type_document_options[$value->tid] = $value->name;
    }

    $form['tipo_documento'] = array(
        '#type' => 'select',
        '#title' => t('Tipo de documento'),
        '#options' => $type_document_options,
        '#required' => variable_get('tol_flag_required_field_tipo_documento', 0),
            //'#default_value' => $category['selected'],
            //'#default_value' => $type_document_options,
            //'#disabled' => TRUE,
    );

    $form['numero_documento'] = array(
        '#type' => 'textfield',
        '#title' => t('N&uacute;mero de documento'),
        '#required' => TRUE,
    );

    $form['fecha_expedicion'] = array(
        '#title' => t('Fecha de expedici&oacute;n'),
        '#type' => 'date',
        '#default_value' => array(
            'month' => format_date(time(), 'custom', 'n'),
            'day' => format_date(time(), 'custom', 'j'),
            'year' => format_date(time(), 'custom', 'Y'),
        ),
    );

    $form['continue'] = array(
        '#type' => 'submit',
        '#value' => t('Continuar'),
        '#name' => 'continue',
        /*
          '#attributes' => array(
          'class' => array('close-colorbox'),
          ),
         */
        '#ajax' => array(
            'callback' => 'tol_documento_form_callback',
            'wrapper' => 'modal',
        ),
    );

    return $form;
}

function tol_documento_form_validate($form, &$form_state) {
    if (form_get_errors())
        return false;

    global $user;
    $account = user_load($user->uid, true);

    $day = $form_state['values']['fecha_expedicion']['day'];
    $month = $form_state['values']['fecha_expedicion']['month'];
    $year = $form_state['values']['fecha_expedicion']['year'];

    if (!empty($account->field_nro_documento[LANGUAGE_NONE][0]['value'])) {
        if ($account->field_nro_documento[LANGUAGE_NONE][0]['value'] != $form_state['values']['numero_documento']) { //el codigo coindice
            form_set_error('numero_documento', t('El numero de documento ingresado no coincide.'));
        }
    }
}

/*
  function tol_documento_form_submit($form, &$form_state) {

  }
 */

//function tol_documento_form_submit($form, &$form_state){
function tol_documento_form_callback($form, &$form_state) {
    if (variable_get('tol_flag_required_step_security_questions') == '1') {

        $form = render(drupal_get_form('tol_preguntas_form'));
        return theme('editar-preguntas', array('formulario_preguntas' => $form));
    } else {
        _tol_addNewLine();

        global $base_url;
        ctools_include('ajax');
        $commands[] = ctools_ajax_command_redirect($base_url . '/online/resumen');
        return array('#type' => 'ajax', '#commands' => $commands);
    }
}

/** Eliminar linea * */
function tol_eliminar_linea_form($form, &$form_state, $lineaInfo) {
    $form = array();

    $form['id'] = array(
        '#type' => 'hidden',
        '#value' => $lineaInfo['lineaID'],
    );

    $form['name'] = array(
        '#type' => 'hidden',
        '#value' => $lineaInfo['lineaName'],
    );

    $form['num'] = array(
        '#type' => 'hidden',
        '#value' => $lineaInfo['lineaNum'],
    );

    $form['cancelar'] = array(
        '#type' => 'submit',
        '#value' => t('Cancelar'),
        '#name' => 'cancelar',
        //'#submit' => array('tol_eliminar_cancel_button'),
        '#attributes' => array('class' => array('form-cancel')),
        '#ajax' => array(
            'callback' => 'tol_eliminar_cancel_button',
        ),
    );

    $form['guardar'] = array(
        '#type' => 'submit',
        '#value' => t('Aceptar'),
        '#name' => 'continue',
        '#attributes' => array(
            'class' => array('form-send'),
        //'class' => array('close-colorbox'),
        ),
        '#ajax' => array(
            'callback' => 'tol_eliminar_linea_form_callback',
        ),
    );

    return $form;
}

function tol_eliminar_cancel_button($form, &$form_state) {

    global $base_url;
    ctools_include('ajax');
    $commands[] = ctools_ajax_command_redirect($base_url . '/online/mis-lineas');
    return array('#type' => 'ajax', '#commands' => $commands);
}

/*
  function tol_eliminar_linea_form_submit($form, &$form_state) {

  }
 */

function tol_eliminar_linea_form_callback($form, &$form_state) {

    global $user;
    if ($user->uid != 0) {
        module_load_include('inc', 'msisdn', 'msisdn.api');
        $linearegister = uid_getmsisdn($user->uid); //tol_get_current_msisdn();  
        if ($linearegister != $form_state['values']['num']) {
            module_load_include('inc', 'tol', 'lib/lines');
            $lineDB = new TOL_lines();
            $obj_lineas = $lineDB->get($user->uid);
            $valor = count($obj_lineas);
            if (count($obj_lineas) != 1) {
                $result = $lineDB->del($user->uid, $form_state['values']['num']);
                //entity_delete('lineas_celulares_usuario', $form_state['values']['id']); //se borra la linea
                if ($_SESSION['my_predetermi_line'] == $form_state['values']['num']) {
                    $_SESSION['my_predetermi_line'] = null;
                }

                if ($_SESSION['my_line'] == $form_state['values']['num']) {
                    $_SESSION['my_line'] = null;

                    foreach ($obj_lineas as $line) {
                        if ($line->line != $form_state['values']['num'] && $_SESSION['my_line'] == null) {
                            $_SESSION['my_line'] = $line->line;
                        }
                    }
                }
                tol_clear_cache();
                drupal_set_message(t('Se ha borrado la lÃ­nea @name', array('@name' => $form_state['values']['name'])));
            } else {
                drupal_set_message(t('No se puede eliminar esta lÃ­nea, es la Ãºnica asociada.'));
            }
        } else {
            drupal_set_message(t('No se puede eliminar la lÃ­nea predeterminada.'));
        }
    }

    global $base_url;
    ctools_include('ajax');
    $commands[] = ctools_ajax_command_redirect($base_url . '/online/mis-lineas');
    return array('#type' => 'ajax', '#commands' => $commands);
}

function tol_linea_detalle_validacion_form($form, &$form_state) {

    $form = array();

    $form['nombre'] = array(
        '#type' => 'textfield',
        '#title' => t('Nombre'),
    );

    $form['apellido'] = array(
        '#type' => 'textfield',
        '#title' => t('Apellido'),
    );

    $form['tipo_dni'] = array(
        '#type' => 'textfield',
        '#title' => t('Tipo de documento'),
    );

    $form['nro_dni'] = array(
        '#type' => 'textfield',
        '#title' => t('Numero de documento'),
    );

    $form['direccion'] = array(
        '#type' => 'textfield',
        '#title' => t('Direccion'),
    );

    $form['departamento'] = array(
        '#type' => 'textfield',
        '#title' => t('Departamento'),
    );

    $form['ciudad'] = array(
        '#type' => 'textfield',
        '#title' => t('Ciudad'),
    );

    $form['atras'] = array(
        '#type' => 'submit',
        '#value' => t('Atras'),
        '#name' => 'cancelar',
        '#attributes' => array('class' => array('form-cancel')),
    );

    $form['siguiente'] = array(
        '#type' => 'submit',
        '#value' => t('Siguiente'),
        '#name' => 'continue',
        '#attributes' => array('class' => array('form-send')),
    );

    return $form;
}

function tol_linea_detalle_validacion_form_submit($form, &$form_state) {
    //AQUI VA LA LÃGICA DE NEGOCIO
}

function tol_linea_bloquear_equipo_form($form, &$form_state) {

    $form = array();

    $form['id'] = array(
        '#type' => 'hidden',
        '#title' => t('id'),
    );

    $form['robo'] = array(
        '#type' => 'submit',
        '#value' => t('Robo'),
        '#name' => 'robo',
        '#attributes' => array('class' => array('form-robo')),
        '#ajax' => array(
            'callback' => 'tol_linea_bloquear_equipo_form_callback',
        ),
    );

    $form['perdida'] = array(
        '#type' => 'submit',
        '#value' => t('Perdida'),
        '#name' => 'perdida',
        '#attributes' => array('class' => array('form-perdida')),
        '#ajax' => array(
            'callback' => 'tol_linea_bloquear_equipo_form_callback',
        ),
    );

    return $form;
}

/*
  function tol_linea_bloquear_equipo_form_submit($form, &$form_state) {

  }
 */

function tol_linea_bloquear_equipo_form_callback($form, &$form_state) {

    //AQUI FALTA VER SI ES POR ROBO O PERDIDA
    _tol_bloquear_equipo();

    global $base_url;
    ctools_include('ajax');
    $commands[] = ctools_ajax_command_redirect($base_url . '/online/mis-lineas/linea-detalle');
    return array('#type' => 'ajax', '#commands' => $commands);
}

function tol_linea_bloquear_linea_form($form, &$form_state) {
    $form = array();

    $form['id'] = array(
        '#type' => 'hidden',
        '#title' => t('id'),
    );

    $form['aceptar'] = array(
        '#type' => 'submit',
        '#value' => t('Aceptar'),
        '#name' => 'continue',
        '#attributes' => array('class' => array('form-send')),
        '#ajax' => array(
            'callback' => 'tol_linea_bloquear_linea_form_callback',
        ),
    );

    $form['cancelar'] = array(
        '#type' => 'submit',
        '#value' => t('Cancelar'),
        '#name' => 'cancelar',
        //'#submit' => array('tol_linea_bloquear_linea_cancel_button'),
        '#attributes' => array('class' => array('form-cancel')),
        '#ajax' => array(
            'callback' => 'tol_linea_bloquear_linea_cancel_button',
        ),
    );

    return $form;
}
function tol_update_linea_predeterminado($lineapredeterminada) {
    global $user;
//    error_log("tol_update_linea_predeterminado user: ".print_r($user, TRUE)."\n",3,'/mnt/logs/drupal/servicios.log');

    if ($user->uid != 0) {
        module_load_include('inc', 'msisdn', 'msisdn.api');
        $linearegister = uid_getmsisdn($user->uid); //tol_get_current_msisdn(); 
        $uid=msisdn_getUid($lineapredeterminada);
//        error_log("tol_update_linea_predeterminado uid: ".print_r($uid, TRUE)."\n",3,'/mnt/logs/drupal/servicios.log');
		
//		error_log("tol_update_linea_predeterminado linearegister: ".print_r($linearegister, TRUE)."\n",3,'/mnt/logs/drupal/servicios.log');
//		error_log("tol_update_linea_predeterminado lineapredeterminada: ".print_r($lineapredeterminada, TRUE)."\n",3,'/mnt/logs/drupal/servicios.log');

        $result=uid_updatemsisdn($user->uid,$lineapredeterminada,$linearegister);
        if($result)
        {
		   $userinfo = user_load($user->uid, true);
	
		   $new_user_info = array(
				'field_msisdn' => array(
					'und' => array(
						0 => array(
							'value' => $lineapredeterminada,
							'format' => '',
							'safe_value' => $lineapredeterminada,
						),
					),
				),
			);
    	 $account = user_save($userinfo, $new_user_info);
    	 drupal_set_message(t('Se ha cambiado la lÃ­nea predeterminada'));
	    }else{
				drupal_set_message(t('No se pudo cambiar de lÃ­nea predeterminada.'));
			}
	
	    } 
  
}
function tol_linea_bloquear_linea_cancel_button($form, &$form_state) {

    global $base_url;
    ctools_include('ajax');
    $commands[] = ctools_ajax_command_redirect($base_url . '/online/mis-lineas/linea-detalle');
    return array('#type' => 'ajax', '#commands' => $commands);
}

function tol_linea_bloquear_linea_form_submit($form, &$form_state) {
    
}

function tol_linea_bloquear_linea_form_callback($form, &$form_state) {

    _tol_bloquear_linea();

    global $base_url;
    ctools_include('ajax');
    $commands[] = ctools_ajax_command_redirect($base_url . '/online/mis-lineas/linea-detalle');
    return array('#type' => 'ajax', '#commands' => $commands);
}

//added RVS 20130701
function tol_complete_profile_form($form, &$form_state) {
    global $user;
    $userinfo = user_load($user->uid, true);
    $mainmsisdn = !empty($userinfo->field_msisdn['und'][0]['value'])?$userinfo->field_msisdn['und'][0]['value']:"";  
    $mainmail = $userinfo->mail;
    $mainnro_documento = empty($userinfo->field_nro_documento['und'][0]['value'])? "" :$userinfo->field_nro_documento['und'][0]['value'];

	$form = array();
    // mail
    $form['mail'] = array(
        '#type' => 'textfield',
        '#weight' => 1,
        '#title' => t('DirecciÃ³n de correo electrÃ³nico'),
        '#required' => TRUE,
        '#default_value' => $mainmail,           
    );

    // field_msisdn
    $form['field_msisdn'] = array(
        '#type' => 'textfield',
        '#weight' => 2,
        '#title' => t('NÃºmero de celular'),
        //'#disabled' => FALSE,
        '#required' => TRUE,
        '#disabled' => empty($mainmsisdn) ? FALSE : TRUE,
        '#default_value' => $mainmsisdn,
    );

    // Tipo Documento
    $v = taxonomy_vocabulary_machine_name_load('type_document');
    $terms = taxonomy_get_tree($v->vid);
    $type_document_options = array();
    $city_child = array();
    foreach ($terms as $key => $value) {
        $type_document_options[$value->tid] = $value->name;
    }

    $form['field_tipo_documento'] = array(
        '#type' => 'select',
        '#weight' => 3,
        '#title' => t('Tipo documento '),
        '#options' => $type_document_options,
        '#required' => variable_get('tol_flag_required_field_tipo_documento', 0),
    );

    // Nro Documento
    $form['field_nro_documento'] = array(
        '#type' => 'textfield',
        '#weight' => 4,
        '#title' => t('Nro Documento '),
        '#required' => variable_get('tol_flag_required_field_nro_documento', 0),
        '#default_value' => $mainnro_documento,
    );   
    	 
	$form['continue'] = array(
        '#type' => 'submit',
        '#value' => t('Guardar'),
        '#name' => 'continue',
        '#ajax' => array(
            'callback' => 'tol_complete_profile_form_callback',
            'wrapper' => 'modal',
        ),
        '#attributes' => array(
            'class' => array('close-colorbox'),
        ),
    );
		
	
    //$form['#submit'][] = 'tol_complete_profile_submit';
    //$form['#validate'][] = 'tol_complete_profile_form_validate';

    return $form;
}

function tol_complete_profile_form_validate($form, &$form_state) {
	
	if (isset ($form_state['values']['field_msisdn']) && $form_state['values']['field_msisdn'] != '') {
		$msisdn=$form_state['values']['field_msisdn'];
		if (!is_numeric($msisdn)){
		  form_set_error('field_msisdn', t('El NÃºmero mÃ³vil solo puede contener dÃ­gitos.'));
		}else if( strlen($msisdn)<6){
		  form_set_error('field_msisdn', t('El NÃºmero mÃ³vil debe contener al menos 6 dÃ­gitos.'));
		}else if( strlen($msisdn)>15){
		  form_set_error('field_msisdn', t('El NÃºmero mÃ³vil no debe contener mas de 15 dÃ­gitos.'));
		}
	}
    
    $documentType = $form_state['values']['field_tipo_documento'];

    $term = taxonomy_term_load($documentType);

    if ($term) 
    {
		$documentType = $term->name;
    }

    $documentNumber = $form_state['values']['field_nro_documento'];
    $account = $form_state['values']['field_msisdn'];

	if ((variable_get('tol_flag_required_service_validation', 0) == 1)) {
		//Validacion con servicios de tigo{
		if(empty($documentType) || empty($documentNumber) || empty($account))
		{
			form_set_error('field_msisdn', t('Debe completar la informaciÃ³n para que la misma pueda ser validada'));
		}
		else{
			/*
			module_load_include('inc', 'tigo_api_services', 'tigo_api_services_api');

			$tigo = new TigoAPIService(); //CAMBIAR
			$result = $tigo->ValidateClientAccount($documentType, $documentNumber, $account);

			if (!empty($result->ValidateClientAccountResponse->ResponseHeader->Message->state)) {
				$is_ok = $result->ValidateClientAccountResponse->ResponseHeader->Message->state == 'OK';
				$is_success = $is_ok && $result->ValidateClientAccountResponse->responseBody->success;
				if (!$is_success) {
					form_set_error('field_msisdn', t('La informaciÃ³n ingresada no es valida'));
					watchdog('tigo_online_lineas.module', "tigo->ValidateClientAccount($documentType, $documentNumber, $account) success=" . var_export($result->ValidateClientAccountResponse->responseBody->success, true));
				}
			} else {
				form_set_error('mail', t('En estos momentos no podemos validar la informaciÃ³n, intente mas tarde'));
			}*/
			
				module_load_include('inc', 'tigoapi', 'tigoapi');
				$tigo = TigoAPI::getInstance();

				if ($data = $tigo->GetClientAccountGeneralInfo($account, 1, 1, 1)) {
					$data = $data->ClientType;

					$documentNumber = trim ($documentNumber);
					$documentNumberFromService = trim ($data->documenNumber);
					//error_log("-compara $documentNumber = ".print_r($documentNumberFromService, TRUE)."\n",3,'/mnt/logs/drupal/servicios.log');
					if ($documentNumber != $documentNumberFromService) {
						form_set_error('field_msisdn', t('La informaciÃ³n ingresada no es valida'));

						watchdog('tigo_login_registration_validate',"tigo->GetClientAccountGeneralInfo($account, 1, 1, 1) found but no match.");
					}

				} else {
					form_set_error('mail', t('En estos momentos no podemos validar la informaciÃ³n, intente mas tarde'));
				}

		}
	}
	$errors = form_get_errors();   
	if (!empty($errors))
		return false;	
}

 
function tol_complete_profile_form_callback($form, &$form_state) {

	$errors = form_get_errors();
     if (empty($errors)) {    
	
		global $user;
		$userinfo = user_load($user->uid, true);
	
		if(empty($userinfo->field_msisdn['und'][0]['value']))
		{
			$rform = drupal_get_form('tigo_online_generic_sms_confirmation_form', $form_state['values']['field_msisdn'], 'tol_complete_profile_form_guardar', 
			array(
			'title' => 'ValidaciÃ³n de Registro',
			'msisdn' => $form_state['values']['field_msisdn'],
			'nro_documento' =>  $form_state['values']['field_nro_documento'],
			'tipo_documento' => $form_state['values']['field_tipo_documento'],	
			'mail' => $form_state['values']['mail'],	    
			), NULL, TRUE, FALSE, FALSE, NULL, 'validate-register-sms');
			
			
		  $commands[] = array(
			'command' => 'showColorbox',
			'data' => array(
				'html' => render($rform),
				'size' => array(
						'myHeight' => 375,
						'myWidth' => 770,
				),
			),
		  );
		  
		   return  array(
			  '#type' => 'ajax',
			  '#commands' => $commands,
			  );	
			
		}
		else
		{   
			
			$_SESSION['check_profile_is_running'] = false;
			// Guardo los datos
		   $new_user_info = array(
			'mail' => $form_state['values']['mail'],
			'field_tipo_documento' => array(
				'und' => array(
					0 => array(
						'tid' => $form_state['values']['field_tipo_documento'],
					),
				),
			),
			'field_nro_documento' => array(
				'und' => array(
					0 => array(
						'value' => $form_state['values']['field_nro_documento'],
					),
				),
			),
			'field_msisdn' => array(
				'und' => array(
					0 => array(
						'value' => $form_state['values']['field_msisdn'],
						'format' => '',
						'safe_value' => $form_state['values']['field_msisdn'],
					),
				),
			),
		   
			
		);
		//Guardo la informacion del usuario
		$account = user_save($userinfo, $new_user_info);
	
		global $base_url;
		ctools_include('ajax');			
		drupal_set_message(t('Su perfil ha sido completado con Ã©xito.'), 'status');  
		$commands[] = ctools_ajax_command_redirect($base_url . '/online/resumen');
		//error_log("--tol_complete_profile_form_callback : ".print_r($commands, TRUE)."\n",3,'/mnt/logs/drupal/servicios.log');
		return array('#type' => 'ajax', '#commands' => $commands);
		
		}
    }else{
		global $base_url;
        ctools_include('ajax');
        $commands[] = ctools_ajax_command_redirect($base_url . '/online/resumen/complete-profile');
        return array('#type' => 'ajax', '#commands' => $commands);
        
       
	}	
} 

function tol_complete_profile_form_submit($form, &$form_state) {
	 
}

function tol_complete_profile_form_guardar($commands, $confirmation, $parameters, $wizard) {
 global $user;
 $userinfo = user_load($user->uid, true);
 
    // Guardo los datos
       $new_user_info = array(
        'mail' => $parameters['params']['mail'],
        'field_tipo_documento' => array(
            'und' => array(
                0 => array(
                    'tid' => $parameters['params']['tipo_documento'],
                ),
            ),
        ),
        'field_nro_documento' => array(
            'und' => array(
                0 => array(
                    'value' => $parameters['params']['nro_documento'],
                ),
            ),
        ),
        'field_msisdn' => array(
            'und' => array(
                0 => array(
                    'value' => $parameters['params']['msisdn'],
                    'format' => '',
                    'safe_value' => $parameters['params']['msisdn'],
                ),
            ),
        ),
        
        
    );
    //Guardo la informacion del usuario
    $account = user_save($userinfo, $new_user_info);
   
  
  // Bandera validacion de codigo.
  $_SESSION['validCode_' . $parameters['form_state']['values']['input_msisdn']] = TRUE;
  $commands = array();
  ctools_include('ajax');
  ctools_include('modal');
  drupal_set_message(t('Su perfil ha sido completado con Ã©xito.'), 'status');
  $commands[] = ctools_ajax_command_redirect($base_url . '/online/resumen');
  return $commands;
 
}

function tol_suscripcion_item() {
    $item = new stdClass();
    $item->text = t('Tigo Online');
    $item->url = 'online/resumen';
    /*
      $item->linkOptions=	array(
      'query'=>array(
      'width'=>600,
      'height'=>600,
      ),
      'attributes' => array(
      'class' => 'colorbox-node'
      )
      ); */
    $item->icon = url(drupal_get_path('module', 'tol') . '/images/movil_120.png');
    return $item;
}

/**
 * Implements hook_mail()
 */
function tol_mail($key, &$message, $params) {
    global $base_url;

    switch ($key) {
        case 'confirmacion_pago':
            // Headers
            $message['headers'] = array_merge(
                    $message['headers'], array(
                'MIME-Version' => '1.0',
                'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
                'Content-Transfer-Encoding' => '8Bit',
                'X-Mailer' => 'Drupal'
                    )
            );
            // Subject
            $message['subject'] = t('ConfirmaciÃ³n Pago Tigo');
            // Message
            
            $valores = array(
                'mail' => $params['correo'],
                'state' => $params['state'],
                'base_url' => $base_url,
                'transaccion_id' => $params['transaccion_id'],
                'telefono' => $params['telefono'],
                'fecha' => $params['fecha'],
                'valor' => $params['valor'],
            );
            $message['body'][] = theme('confirmacion_mail', $valores);

            break;
    }
}

function tol_clear_cache() {
    $block = block_load('tol', 'line_selector');
    $cid = _block_get_cache_id($block);
    cache_clear_all($cid, 'cache_block');
}
